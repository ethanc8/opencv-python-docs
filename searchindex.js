Search.setIndex({"docnames": ["cv2.aruco", "cv2.barcode", "cv2.cuda", "cv2.dnn", "index"], "filenames": ["cv2.aruco.md", "cv2.barcode.md", "cv2.cuda.md", "cv2.dnn.md", "index.md"], "titles": ["<code class=\"docutils literal notranslate\"><span class=\"pre\">cv2.aruco</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">cv2.barcode</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">cv2.cuda</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">cv2.dnn</span></code>", "OpenCV Python API"], "terms": {"none": [0, 1, 2, 3], "corner_refine_apriltag": 0, "int": [0, 2, 3], "corner_refine_contour": 0, "corner_refine_non": 0, "corner_refine_subpix": 0, "dict_4x4_100": 0, "dict_4x4_1000": 0, "dict_4x4_250": 0, "dict_4x4_50": 0, "dict_5x5_100": 0, "dict_5x5_1000": 0, "dict_5x5_250": 0, "dict_5x5_50": 0, "dict_6x6_100": 0, "dict_6x6_1000": 0, "dict_6x6_250": 0, "dict_6x6_50": 0, "dict_7x7_100": 0, "dict_7x7_1000": 0, "dict_7x7_250": 0, "dict_7x7_50": 0, "dict_apriltag_16h5": 0, "dict_apriltag_25h9": 0, "dict_apriltag_36h10": 0, "dict_apriltag_36h11": 0, "dict_aruco_mip_36h12": 0, "dict_aruco_origin": 0, "arucodetector": 0, "detectmark": 0, "imag": [0, 1, 2, 3], "corner": 0, "id": [0, 3], "rejectedimgpoint": 0, "basic": 0, "marker": 0, "detect": [0, 1, 3], "perform": [0, 2, 3], "input": [0, 2, 3], "onli": [0, 2, 3], "includ": [0, 2, 3], "specif": [0, 3], "dictionari": 0, "ar": [0, 2, 3], "search": [0, 2, 3], "For": [0, 1, 2, 3], "each": [0, 2, 3], "return": [0, 1, 2, 3], "2d": [0, 2, 3], "posit": 0, "its": [0, 2, 3], "correspond": [0, 3], "identifi": [0, 3], "note": [0, 3], "thi": [0, 1, 2, 3], "doe": [0, 2, 3], "pose": 0, "estim": [0, 3], "The": [0, 2, 3], "correct": [0, 3], "len": 0, "distort": [0, 2], "take": [0, 2, 3], "account": 0, "It": [0, 3], "": [0, 1, 2, 3], "recommend": [0, 2], "undistortinput": 0, "camera": 0, "model": [0, 3], "paramet": [0, 1, 2, 3], "known": 0, "see": [0, 1, 2, 3], "also": [0, 2, 3], "undistort": 0, "estimateposesinglemark": 0, "estimateposeboard": 0, "self": [0, 1, 2, 3], "type": [0, 1, 2, 3], "matlik": [0, 1, 2, 3], "_type": [0, 1, 3], "sequenc": [0, 1, 3], "vector": [0, 1, 3], "four": [0, 1], "cornersar": 0, "provid": [0, 3], "e": [0, 3], "g": [0, 3], "std": [0, 3], "cv": [0, 3], "point2f": [0, 3], "n": [0, 1, 3], "dimens": [0, 1, 3], "arrai": [0, 1, 2, 3], "i": [0, 1, 2, 3], "nx4": 0, "order": [0, 1, 2, 3], "clockwis": 0, "size": [0, 2, 3], "have": [0, 1, 3], "same": [0, 2, 3], "than": [0, 3], "imgpoint": 0, "contain": [0, 1, 2, 3], "those": 0, "squar": 0, "whose": 0, "inner": 0, "code": [0, 1], "ha": [0, 2, 3], "acorrect": 0, "codif": 0, "us": [0, 2, 3], "debug": 0, "purpos": 0, "rettyp": [0, 1, 2, 3], "tupl": [0, 1, 3], "umat": [0, 1, 2, 3], "refinedetectedmark": 0, "board": 0, "detectedcorn": 0, "detectedid": 0, "rejectedcorn": 0, "cameramatrix": 0, "distcoeff": 0, "recoveredidx": 0, "refin": 0, "base": [0, 3], "alreadi": [0, 2, 3], "layout": 0, "tri": 0, "find": 0, "were": 0, "detecmark": 0, "first": [0, 3], "current": [0, 2, 3], "interpol": 0, "miss": [0, 2], "Then": [0, 3], "between": 0, "reproject": 0, "reject": 0, "candid": 0, "minrepdist": 0, "errorcorrectionr": 0, "If": [0, 2, 3], "coeffici": [0, 3], "projectpoint": 0, "project": 0, "global": 0, "homographi": 0, "all": [0, 2, 3], "must": [0, 2, 3], "z": 0, "coordin": [0, 3], "dure": [0, 3], "process": [0, 2, 3], "option": [0, 1, 2, 3], "3x3": 0, "float": [0, 2, 3], "point": [0, 1, 2, 3], "matrix": [0, 2], "A": [0, 3], "vecthreethre": 0, "f_x": 0, "0": [0, 2, 3], "c_x": 0, "f_y": 0, "c_y": 0, "1": [0, 2, 3], "k_1": 0, "k_2": 0, "p_1": 0, "p_2": 0, "k_3": 0, "k_4": 0, "k_5": 0, "k_6": 0, "s_1": 0, "s_2": 0, "s_3": 0, "s_4": 0, "4": [0, 1, 3], "5": 0, "8": [0, 2], "12": 0, "element": [0, 2], "index": [0, 2, 3], "recov": 0, "theorigin": 0, "__init__": [0, 1, 2, 3], "detectorparam": 0, "detectorparamet": 0, "refineparam": 0, "refineparamet": 0, "initi": [0, 1, 2, 3], "help": [0, 1, 2, 3], "accur": [0, 1, 2, 3], "signatur": [0, 1, 2, 3], "getdictionari": 0, "retval": [0, 1, 2, 3], "setdictionari": 0, "getdetectorparamet": 0, "setdetectorparamet": 0, "getrefineparamet": 0, "setrefineparamet": 0, "write": 0, "f": [0, 3], "name": [0, 3], "simplifi": 0, "api": [0, 2, 3], "languag": [0, 3], "bind": [0, 2], "filestorag": 0, "str": [0, 1, 3], "read": [0, 3], "fn": 0, "algorithm": [0, 1, 2], "from": [0, 2, 3], "file": [0, 3], "storag": 0, "filenod": 0, "objpoint": 0, "matchimagepoint": 0, "given": [0, 2, 3], "configur": [0, 3], "set": [0, 2, 3], "correspondingimag": 0, "object": [0, 2, 3], "can": [0, 2, 3], "solvepnp": 0, "list": [0, 3], "gridboard": 0, "method": [0, 1, 2, 3], "expect": [0, 2], "charucoboard": 0, "mat": [0, 2, 3], "charuco": 0, "chess": 0, "match": 0, "ani": [0, 2, 3], "space": [0, 2], "point3f": 0, "objectpoint": 0, "generateimag": 0, "outsiz": 0, "img": [0, 1], "margins": 0, "borderbit": 0, "draw": 0, "planar": 0, "readi": [0, 3], "print": 0, "output": [0, 1, 2, 3], "pixel": [0, 2, 3], "outsizeand": 0, "center": [0, 3], "keep": [0, 3], "proport": 0, "minimum": [0, 2, 3], "margin": 0, "width": [0, 3], "border": [0, 2], "emploi": 0, "getobjpoint": 0, "left": [0, 3], "top": [0, 3], "th": 0, "right": [0, 3], "2": [0, 2], "bottom": [0, 3], "3": [0, 2, 3], "place": 0, "certain": 0, "row": [0, 2], "everi": [0, 3], "m": [0, 2], "mx4": 0, "getid": 0, "should": [0, 1, 2, 3], "getrightbottomcorn": 0, "get": [0, 3], "when": [0, 2, 3], "call": [0, 2, 3], "creat": [0, 2, 3], "squarelength": 0, "markerlength": 0, "checkcharucocornerscollinear": 0, "charucoid": 0, "check": [0, 2], "whether": [0, 2, 3], "collinear": 0, "number": [0, 2, 3], "chessboard": 0, "straight": 0, "line": 0, "true": [0, 1, 2, 3], "so": [0, 2, 3], "fals": [0, 2, 3], "axi": 0, "parallel": [0, 3], "well": 0, "diagon": 0, "other": [0, 1, 2, 3], "degener": 0, "case": [0, 3], "charucocorn": 0, "per": [0, 3], "frame": [0, 3], "bool": [0, 1, 2, 3], "valu": [0, 2, 3], "form": 0, "thei": [0, 3], "do": [0, 2, 3], "calibr": [0, 3], "fail": [0, 3], "setlegacypattern": 0, "legacypattern": 0, "legaci": 0, "pattern": 0, "start": [0, 2, 3], "white": [0, 2], "box": [0, 3], "upper": 0, "an": [0, 2, 3], "even": [0, 2], "count": [0, 2, 3], "otherwis": [0, 2], "black": 0, "ensur": [0, 2], "compat": [0, 2], "opencv": [0, 2], "version": [0, 2, 3], "prior": 0, "6": 0, "http": [0, 2, 3], "github": [0, 3], "com": [0, 3], "issu": 0, "23152": 0, "default": [0, 2, 3], "getlegacypattern": 0, "getchessboards": 0, "getsquarelength": 0, "getmarkerlength": 0, "getchessboardcorn": 0, "chessboardcorn": 0, "charucodetector": 0, "detectboard": 0, "markercorn": 0, "markerid": 0, "receiv": 0, "empti": [0, 1, 2, 3], "run": [0, 2, 3], "approxim": 0, "els": 0, "local": [0, 2], "visibl": 0, "findchessboardcorn": 0, "necesari": 0, "andshould": 0, "sent": 0, "fourcorn": 0, "detectdiamond": 0, "diamondcorn": 0, "diamondid": 0, "diamond": 0, "previou": [0, 3], "faster": 0, "less": [0, 3], "necessari": [0, 3], "subpixel": 0, "orderi": 0, "similar": [0, 3], "format": [0, 3], "fact": [0, 3], "oftyp": 0, "vec4i": 0, "which": [0, 2, 3], "compos": 0, "charucoparam": 0, "charucoparamet": 0, "getboard": 0, "setboard": 0, "getcharucoparamet": 0, "setcharucoparamet": 0, "minmark": 0, "tryrefinemark": 0, "readdetectorparamet": 0, "new": [0, 3], "root": 0, "writedetectorparamet": 0, "adaptivethreshwinsizemin": 0, "adaptivethreshwinsizemax": 0, "adaptivethreshwinsizestep": 0, "adaptivethreshconst": 0, "minmarkerperimeterr": 0, "maxmarkerperimeterr": 0, "polygonalapproxaccuracyr": 0, "mincornerdistancer": 0, "mindistancetobord": 0, "minmarkerdistancer": 0, "mingroupdist": 0, "cornerrefinementmethod": 0, "cornerrefinementwins": 0, "relativecornerrefinmentwins": 0, "cornerrefinementmaxiter": 0, "cornerrefinementminaccuraci": 0, "markerborderbit": 0, "perspectiveremovepixelpercel": 0, "perspectiveremoveignoredmarginpercel": 0, "maxerroneousbitsinborderr": 0, "minotsustddev": 0, "apriltagquaddecim": 0, "apriltagquadsigma": 0, "apriltagminclusterpixel": 0, "apriltagmaxnmaxima": 0, "apriltagcriticalrad": 0, "apriltagmaxlinefitms": 0, "apriltagminwhiteblackdiff": 0, "apriltagdeglitch": 0, "detectinvertedmark": 0, "usearuco3detect": 0, "minsidelengthcanonicalimg": 0, "minmarkerlengthratiooriginalimg": 0, "byteslist": 0, "_markers": 0, "maxcorr": 0, "getdistancetoid": 0, "bit": [0, 2, 3], "allrot": 0, "ham": 0, "distanc": 0, "flag": [0, 2, 3], "posibl": 0, "rotat": [0, 1, 3], "consid": 0, "generateimagemark": 0, "sidepixel": 0, "_img": 0, "gener": [0, 2], "canon": 0, "readdictionari": 0, "exampl": 0, "yaml": [0, 3], "nmarker": 0, "35": 0, "markers": 0, "maxcorrectionbit": 0, "marker_0": 0, "101011111011111001001001101100000000": 0, "marker_34": 0, "011111010000111011111110110101100101": 0, "writedictionari": 0, "onlybit": 0, "maxcorrectionr": 0, "idx": [0, 3], "refer": [0, 2, 3], "static": [0, 2], "getbytelistfrombit": 0, "transform": [0, 3], "byte": [0, 2, 3], "getbitsfrombytelist": 0, "bytelist": 0, "markersepar": 0, "getgrids": 0, "getmarkersepar": 0, "checkallord": 0, "readrefineparamet": 0, "writerefineparamet": 0, "dictionary_getbitsfrombytelist": 0, "dictionary_getbytelistfrombit": 0, "drawdetectedcornerscharuco": 0, "cornercolor": 0, "channel": [0, 2, 3], "notalt": 0, "scalar": [0, 2, 3], "color": [0, 1, 2], "surround": 0, "drawdetecteddiamond": 0, "bordercolor": 0, "them": [0, 3], "paint": 0, "bydetectcharucodiamond": 0, "formatreturn": 0, "detectcharucodiamond": 0, "rest": 0, "text": [0, 3], "calcul": [0, 2], "one": [0, 1, 3], "drawdetectedmark": 0, "alter": 0, "markerscorn": 0, "improv": 0, "visual": 0, "extenddictionari": 0, "basedictionari": 0, "randomse": 0, "extend": 0, "x": [0, 2, 3], "directli": 0, "higher": 0, "taken": [0, 3], "ad": [0, 3], "begin": 0, "user": [0, 3], "suppli": 0, "seed": 0, "therng": 0, "indic": [0, 3], "valid": [0, 1], "specifi": [0, 1, 2, 3], "getpredefineddictionari": 0, "dict": 0, "predefin": 0, "referenc": 0, "dict_": 0, "barcodedetector": 1, "prototxt_path": 1, "model_path": 1, "decodewithtyp": 1, "decoded_info": 1, "decoded_typ": 1, "decod": [1, 3], "onc": 1, "found": [1, 3], "grayscal": [1, 2], "bgr": [1, 3], "bar": 1, "rectangl": [1, 3], "vertic": 1, "some": [1, 2, 3], "bottomleft": 1, "topleft": 1, "topright": 1, "bottomright": 1, "utf8": 1, "encod": 1, "string": [1, 3], "cannot": 1, "least": 1, "been": 1, "detectanddecodewithtyp": 1, "both": 1, "Will": 1, "device_info_compute_mode_default": 2, "device_info_compute_mode_exclus": 2, "device_info_compute_mode_exclusive_process": 2, "device_info_compute_mode_prohibit": 2, "dynamic_parallel": 2, "deviceinfo_computemodedefault": 2, "deviceinfo_computemodeexclus": 2, "deviceinfo_computemodeexclusiveprocess": 2, "deviceinfo_computemodeprohibit": 2, "event_blocking_sync": 2, "event_default": 2, "event_disable_tim": 2, "event_interprocess": 2, "feature_set_compute_10": 2, "feature_set_compute_11": 2, "feature_set_compute_12": 2, "feature_set_compute_13": 2, "feature_set_compute_20": 2, "feature_set_compute_21": 2, "feature_set_compute_30": 2, "feature_set_compute_32": 2, "feature_set_compute_35": 2, "feature_set_compute_50": 2, "global_atom": 2, "host_mem_page_lock": 2, "host_mem_shar": 2, "host_mem_write_combin": 2, "hostmem_page_lock": 2, "hostmem_shar": 2, "hostmem_write_combin": 2, "native_doubl": 2, "shared_atom": 2, "warp_shuffle_funct": 2, "bufferpool": 2, "getbuff": 2, "col": 2, "gpumat": 2, "stream": 2, "getalloc": 2, "alloc": [2, 3], "deviceinfo": 2, "device_id": 2, "deviceid": 2, "system": [2, 3], "devic": [2, 3], "totalglobalmem": 2, "sharedmemperblock": 2, "regsperblock": 2, "warpsiz": 2, "mempitch": 2, "maxthreadsperblock": 2, "maxthreadsdim": 2, "vec3i": 2, "maxgrids": 2, "clockrat": 2, "totalconstmem": 2, "majorvers": 2, "minorvers": 2, "texturealign": 2, "texturepitchalign": 2, "multiprocessorcount": 2, "kernelexectimeouten": 2, "integr": 2, "canmaphostmemori": 2, "computemod": 2, "deviceinfo_computemod": 2, "maxtexture1d": 2, "maxtexture1dmipmap": 2, "maxtexture1dlinear": 2, "maxtexture2d": 2, "vec2i": 2, "maxtexture2dmipmap": 2, "maxtexture2dlinear": 2, "maxtexture2dgath": 2, "maxtexture3d": 2, "maxtexturecubemap": 2, "maxtexture1dlay": 2, "maxtexture2dlay": 2, "maxtexturecubemaplay": 2, "maxsurface1d": 2, "maxsurface2d": 2, "maxsurface3d": 2, "maxsurface1dlay": 2, "maxsurface2dlay": 2, "maxsurfacecubemap": 2, "maxsurfacecubemaplay": 2, "surfacealign": 2, "concurrentkernel": 2, "eccen": 2, "pcibusid": 2, "pcideviceid": 2, "pcidomainid": 2, "tccdriver": 2, "asyncenginecount": 2, "unifiedaddress": 2, "memoryclockr": 2, "memorybuswidth": 2, "l2caches": 2, "maxthreadspermultiprocessor": 2, "querymemori": 2, "totalmemori": 2, "freememori": 2, "iscompat": 2, "modul": [2, 3], "event": 2, "event_createflag": 2, "record": 2, "queryifcomplet": 2, "waitforcomplet": 2, "elapsedtim": 2, "end": 2, "gpudata": 2, "step": [2, 3], "rowrang": 2, "rang": [2, 3], "colrang": 2, "roi": [2, 3], "rect": [2, 3], "arr": 2, "upload": 2, "data": [2, 3], "non": [2, 3], "block": 2, "copi": 2, "host": 2, "memori": [2, 3], "As": [2, 3], "being": 2, "guarante": 2, "oper": 2, "finish": 2, "mai": [2, 3], "overlap": 2, "p": [2, 3], "dst": [2, 3], "hostmem": 2, "page_lock": 2, "download": 2, "copyto": 2, "mask": [2, 3], "setto": 2, "convertto": 2, "rtype": 2, "alpha": 2, "beta": 2, "startrow": 2, "endrow": 2, "r": [2, 3], "startcol": 2, "endcol": 2, "defaultalloc": 2, "setdefaultalloc": 2, "releas": [2, 3], "swap": [2, 3], "clone": 2, "assignto": 2, "y": [2, 3], "reshap": [2, 3], "cn": 2, "locateroi": 2, "wholes": 2, "ofs": 2, "adjustroi": 2, "dtop": 2, "dbottom": 2, "dleft": 2, "dright": 2, "iscontinu": 2, "elems": 2, "elemsize1": 2, "depth": [2, 3], "step1": 2, "cudaptr": 2, "intpoint": 2, "updatecontinuityflag": 2, "gpumatnd": 2, "alloc_typ": 2, "hostmem_alloctyp": 2, "b": [2, 3], "createmathead": 2, "map": 2, "cpu": 2, "gpu": 2, "address": 2, "header": 2, "without": [2, 3], "countingfor": 2, "done": 2, "wa": [2, 3], "share": 2, "support": [2, 3], "hardwar": 2, "laptop": 2, "often": 2, "video": 2, "elimin": [2, 3], "extra": 2, "classmethod": [2, 3], "null": 2, "add": 2, "callback": 2, "after": [2, 3], "enqueu": 2, "item": 2, "havecomplet": 2, "make": [2, 3], "synchronizationthat": 2, "depend": 2, "outstand": 2, "work": 2, "mandat": 2, "earlier": 2, "independ": 2, "execut": 2, "undefin": 2, "serial": [2, 3], "cl": [2, 3], "cudaflag": 2, "queue": 2, "thread": 2, "until": 2, "complet": 2, "waitev": 2, "comput": [2, 3], "wait": 2, "targetarch": 2, "major": 2, "minor": 2, "There": 2, "intermedi": [2, 3], "ptx": 2, "binari": [2, 3], "cudacod": 2, "architectur": [2, 3], "capabl": 2, "hasptx": 2, "hasbin": 2, "hasequalorlessptx": 2, "hasequalorgreat": 2, "hasequalorgreaterptx": 2, "hasequalorgreaterbin": 2, "event_elapsedtim": 2, "gpumat_defaultalloc": 2, "gpumat_setdefaultalloc": 2, "stream_nul": 2, "targetarchs_ha": 2, "targetarchs_hasbin": 2, "targetarchs_hasequalorgreat": 2, "targetarchs_hasequalorgreaterbin": 2, "targetarchs_hasequalorgreaterptx": 2, "targetarchs_hasequalorlessptx": 2, "targetarchs_hasptx": 2, "createcontinu": 2, "continu": 2, "store": [2, 3], "gap": 2, "column": 2, "destin": [2, 3], "chang": [2, 3], "proper": 2, "area": 2, "texttt": 2, "time": [2, 3], "creategpumatfromcudamemori": 2, "cudamemoryaddress": 2, "overload": [2, 3], "exist": 2, "export": 2, "intend": 2, "intern": [2, 3], "c": [2, 3], "instead": 2, "just": 2, "mean": [2, 3], "veri": 2, "effici": 2, "extern": 2, "automat": [2, 3], "dealloc": 2, "you": [2, 3], "care": 2, "occupi": 2, "pad": 2, "auto_step": 2, "assum": 2, "actual": 2, "In": [2, 3], "constructor": 2, "go": 2, "revers": 2, "ensuresizeisenough": 2, "big": [2, 3], "enough": 2, "realloc": 2, "desir": 2, "fastnlmeansdenois": 2, "src": [2, 3], "h": [2, 3], "search_window": 2, "block_siz": 2, "denois": 2, "www": 2, "ipol": 2, "im": 2, "pub": 2, "algo": 2, "bcm_non_local_means_denois": 2, "sever": 2, "optim": [2, 3], "nois": 2, "gaussian": [2, 3], "appli": [2, 3], "look": 2, "fastnonlocalmeansdenois": 2, "labmethod": 2, "sa": 2, "regul": 2, "filter": [2, 3], "strength": 2, "perfectli": 2, "remov": [2, 3], "alsoremov": 2, "detail": [2, 3], "smaller": 2, "preserv": [2, 3], "window": 2, "weight": [2, 3], "averag": 2, "forgiven": 2, "odd": 2, "affect": 2, "linearli": 2, "greater": 2, "21": 2, "templat": [2, 3], "patch": 2, "beodd": 2, "7": 2, "asynchron": [2, 3], "invoc": 2, "fastnlmeansdenoisingcolor": 2, "h_lumin": 2, "photo_rend": 2, "modif": 2, "convert": [2, 3], "cielab": 2, "colorspac": 2, "separ": 2, "l": 2, "ab": [2, 3], "compon": 2, "simplemethod": 2, "butalso": 2, "most": [2, 3], "equal": [2, 3], "10": 2, "beenough": 2, "getcudaenableddevicecount": 2, "instal": 2, "enabl": [2, 3], "befor": [2, 3], "compil": [2, 3], "driver": 2, "incompat": 2, "getdevic": 2, "setdevic": 2, "nonlocalmean": 2, "bordermod": 2, "pure": 2, "simplif": 2, "thu": 2, "fast": 2, "sourc": 2, "cv_8uc1": 2, "cv_8uc2": 2, "cv_8uc3": 2, "sigma": [2, 3], "borderinterpol": 2, "border_reflect101": 2, "border_repl": 2, "border_const": 2, "border_reflect": 2, "border_wrap": 2, "now": 2, "printcudadeviceinfo": 2, "printshortcudadeviceinfo": 2, "registerpagelock": 2, "page": 2, "lock": 2, "resetdevic": 2, "explicitli": 2, "destroi": 2, "clean": 2, "up": 2, "resourc": 2, "associ": [2, 3], "currentprocess": 2, "subsequ": 2, "reiniti": 2, "setbufferpoolconfig": 2, "stacksiz": 2, "stackcount": 2, "setbufferpoolusag": 2, "omit": [2, 3], "fist": 2, "usag": [2, 3], "unregisterpagelock": 2, "unmap": 2, "pageabl": 2, "again": 2, "wrapstream": 2, "cudastreammemoryaddress": 2, "runtim": 2, "pointer": [2, 3], "cudastream_t": 2, "simpli": 2, "wrap": 2, "raw": 2, "dnn_backend_cann": 3, "dnn_backend_cuda": 3, "dnn_backend_default": 3, "dnn_backend_halid": 3, "dnn_backend_inference_engin": 3, "dnn_backend_opencv": 3, "dnn_backend_timvx": 3, "dnn_backend_vkcom": 3, "dnn_backend_webnn": 3, "dnn_layout_ncdhw": 3, "dnn_layout_nchw": 3, "dnn_layout_nd": 3, "dnn_layout_ndhwc": 3, "dnn_layout_nhwc": 3, "dnn_layout_planar": 3, "dnn_layout_unknown": 3, "dnn_pmode_crop_cent": 3, "dnn_pmode_letterbox": 3, "dnn_pmode_nul": 3, "dnn_target_cpu": 3, "dnn_target_cpu_fp16": 3, "dnn_target_cuda": 3, "dnn_target_cuda_fp16": 3, "dnn_target_fpga": 3, "dnn_target_hddl": 3, "dnn_target_myriad": 3, "dnn_target_npu": 3, "dnn_target_opencl": 3, "dnn_target_opencl_fp16": 3, "dnn_target_vulkan": 3, "soft_nmsmethod_softnms_gaussian": 3, "soft_nmsmethod_softnms_linear": 3, "softnmsmethod_softnms_gaussian": 3, "softnmsmethod_softnms_linear": 3, "classificationmodel": 3, "config": 3, "network": 3, "net": 3, "classifi": 3, "classid": 3, "conf": 3, "setenablesoftmaxpostprocess": 3, "disabl": 3, "softmax": 3, "post": 3, "forward": 3, "infer": 3, "within": 3, "confid": 3, "allow": 3, "toggl": 3, "behavior": 3, "pleas": 3, "turn": 3, "layer": 3, "param": 3, "getenablesoftmaxpostprocess": 3, "detectionmodel": 3, "confthreshold": 3, "nmsthreshold": 3, "blob": 3, "result": 3, "out": 3, "bound": 3, "threshold": 3, "maximum": 3, "suppress": 3, "setnmsacrossclass": 3, "nmsacrossclass": 3, "max": 3, "behaviour": 3, "getnmsacrossclass": 3, "getter": 3, "variabl": 3, "dictvalu": 3, "isint": 3, "isstr": 3, "isreal": 3, "getintvalu": 3, "getrealvalu": 3, "getstringvalu": 3, "image2blobparam": 3, "scalefactor": 3, "swaprb": 3, "ddepth": 3, "datalayout": 3, "mode": 3, "imagepaddingmod": 3, "bordervalu": 3, "blobrecttoimagerect": 3, "rblob": 3, "origin": 3, "blobrectstoimagerect": 3, "rimg": 3, "paddingmod": 3, "keypointsmodel": 3, "thresh": 3, "select": 3, "keypoint": 3, "hold": 3, "preferabletarget": 3, "final": 3, "accord": 3, "inferenc": 3, "deprec": 3, "sinc": 3, "unknown": 3, "futur": 3, "outputnametoindex": 3, "outputnam": 3, "inputnametoindex": 3, "setinputs": 3, "height": 3, "shape": 3, "predict": 3, "setinputmean": 3, "subtract": 3, "setinputscal": 3, "scale": 3, "multipli": 3, "setinputcrop": 3, "crop": 3, "resiz": 3, "setinputswaprb": 3, "last": 3, "setinputparam": 3, "preprocess": 3, "setpreferablebackend": 3, "backendid": 3, "backend": 3, "setpreferabletarget": 3, "targetid": 3, "target": 3, "enablewinograd": 3, "usewinograd": 3, "readfrommodeloptim": 3, "xml": 3, "bin": 3, "intel": 3, "buffer": 3, "represent": 3, "ir": 3, "buffermodelconfig": 3, "bufferweight": 3, "train": 3, "numpi": 3, "ndarrai": 3, "dtype": 3, "uint8": 3, "getlay": 3, "layerid": 3, "layernam": 3, "getlayerid": 3, "const": 3, "pass": 3, "outblobnam": 3, "outputblob": 3, "need": 3, "whole": 3, "By": 3, "quantiz": 3, "calibdata": 3, "inputsdtyp": 3, "outputsdtyp": 3, "perchannel": 3, "datatyp": 3, "cv_32f": 3, "cv_8": 3, "granular": 3, "modelin": 3, "wai": 3, "wise": 3, "tensor": 3, "setinput": 3, "w": 3, "mean_c": 3, "cv_8u": 3, "normal": 3, "connect": 3, "know": 3, "descriptor": 3, "setparam": 3, "numparam": 3, "learn": 3, "differ": 3, "follow": 3, "getparam": 3, "getlayersshap": 3, "netinputshap": 3, "layersid": 3, "inlayersshap": 3, "outlayersshap": 3, "load": 3, "preliminari": 3, "isn": 3, "t": 3, "matshap": 3, "getflop": 3, "flop": 3, "getmemoryconsumpt": 3, "dump": 3, "structur": 3, "hyperparamet": 3, "fusion": 3, "To": 3, "dumptofil": 3, "path": 3, "dot": 3, "extens": 3, "integ": 3, "wasn": 3, "getlayernam": 3, "outpin": 3, "inppin": 3, "second": 3, "layer_nam": 3, "input_numb": 3, "part": 3, "pseudo": 3, "either": 3, "label": 3, "setnetinput": 3, "setinputsnam": 3, "inputblobnam": 3, "alwai": 3, "special": 3, "own": 3, "don": 3, "easi": 3, "setinputshap": 3, "inputnam": 3, "forwardasync": 3, "requir": 3, "asyncarrai": 3, "forwardandretriev": 3, "getinputdetail": 3, "zeropoint": 3, "getoutputdetail": 3, "sethalideschedul": 3, "schedul": 3, "halid": 3, "direct": 3, "repres": 3, "manual": 3, "ask": 3, "where": 3, "combin": 3, "getunconnectedoutlay": 3, "unconnect": 3, "fixit": 3, "rework": 3, "registeroutput": 3, "approach": 3, "getunconnectedoutlayersnam": 3, "getlayertyp": 3, "layerstyp": 3, "getlayerscount": 3, "layertyp": 3, "enablefus": 3, "winograd": 3, "branch": 3, "speed": 3, "up3x3": 3, "convolut": 3, "small": 3, "loss": 3, "accuraci": 3, "getperfprofil": 3, "overal": 3, "tick": 3, "fuse": 3, "zero": 3, "skip": 3, "segmentationmodel": 3, "segment": 3, "textdetectionmodel": 3, "prepar": 3, "quadrangl": 3, "getperspectivetransform": 3, "retriev": 3, "region": 3, "perspect": 3, "dl": 3, "doesn": 3, "kind": 3, "deriv": 3, "detecttextrectangl": 3, "rotationrect": 3, "inaccur": 3, "strong": 3, "rotatedrect": 3, "textdetectionmodel_db": 3, "setbinarythreshold": 3, "binarythreshold": 3, "getbinarythreshold": 3, "setpolygonthreshold": 3, "polygonthreshold": 3, "getpolygonthreshold": 3, "setunclipratio": 3, "unclipratio": 3, "getunclipratio": 3, "setmaxcandid": 3, "maxcandid": 3, "getmaxcandid": 3, "textdetectionmodel_east": 3, "setconfidencethreshold": 3, "getconfidencethreshold": 3, "setnmsthreshold": 3, "nm": 3, "getnmsthreshold": 3, "textrecognitionmodel": 3, "recogn": 3, "recognit": 3, "roirect": 3, "interest": 3, "cv_32sc4": 3, "setdecodetyp": 3, "decodetyp": 3, "translat": 3, "ctc": 3, "greedi": 3, "prefix": 3, "beam": 3, "getdecodetyp": 3, "setdecodeoptsctcprefixbeamsearch": 3, "beamsiz": 3, "vocprunes": 3, "vocabulari": 3, "token": 3, "stand": 3, "prune": 3, "setvocabulari": 3, "getvocabulari": 3, "nmsbox": 3, "bbox": 3, "score": 3, "score_threshold": 3, "nms_threshold": 3, "eta": 3, "top_k": 3, "rect2d": 3, "kept": 3, "adapt": 3, "formula": 3, "_threshold_": 3, "cdot": 3, "_threshold_i": 3, "pick": 3, "nmsboxesbatch": 3, "class_id": 3, "batch": 3, "across": 3, "usual": 3, "nmsboxesrot": 3, "net_readfrommodeloptim": 3, "blobfromimag": 3, "dimension": 3, "blue": 3, "red": 3, "spatial": 3, "intendedto": 3, "channelsin": 3, "choos": 3, "side": 3, "anoth": 3, "larger": 3, "aspect": 3, "ratio": 3, "nchw": 3, "blobfromimagewithparam": 3, "ref": 3, "meet": 3, "more": 3, "struct": 3, "seri": 3, "andcrop": 3, "blobfromimageswithparam": 3, "getavailabletarget": 3, "imagesfromblob": 3, "blob_": 3, "images_": 3, "pars": 3, "4d": 3, "through": 3, "simpler": 3, "precis": 3, "would": 3, "like": 3, "extract": 3, "neither": 3, "readnet": 3, "framework": 3, "deep": 3, "member": 3, "conveni": 3, "abov": 3, "what": 3, "argument": 3, "accept": 3, "buffermodel": 3, "content": 3, "bufferconfig": 3, "appropri": 3, "readnetfromcaff": 3, "readnetfromtensorflow": 3, "readnetfromtorch": 3, "readnetfromdarknet": 3, "matter": 3, "prototxt": 3, "caffemodel": 3, "caff": 3, "bufferproto": 3, "descript": 3, "cfgfile": 3, "darknetmodel": 3, "darknet": 3, "buffercfg": 3, "cfg": 3, "throw": 3, "except": 3, "failur": 3, "readnetfrommodeloptim": 3, "topologi": 3, "import": 3, "launch": 3, "engin": 3, "readnetfromonnx": 3, "onnxfil": 3, "onnx": 3, "readnetfromtflit": 3, "tflite": 3, "flatbuff": 3, "tensorflow": 3, "pb": 3, "protobuf": 3, "pbtxt": 3, "graph": 3, "definit": 3, "built": 3, "let": 3, "u": 3, "flexibl": 3, "isbinari": 3, "evalu": 3, "torch7": 3, "nn": 3, "try": 3, "custom": 3, "serialaz": 3, "avoid": 3, "error": 3, "instanc": 3, "torch": 3, "sequenti": 3, "concat": 3, "linear": 3, "spatialconvolut": 3, "spatialmaxpool": 3, "spatialaveragepool": 3, "relu": 3, "tanh": 3, "sigmoid": 3, "logsoftmax": 3, "equival": 3, "cunn": 3, "cudnn": 3, "fbcunn": 3, "successfulli": 3, "ascii": 3, "prefer": 3, "becaus": 3, "long": 3, "variou": 3, "length": 3, "save": 3, "test": 3, "phase": 3, "readtensorfromonnx": 3, "readtorchblob": 3, "filenam": 3, "warn": 3, "limit": 3, "shrinkcaffemodel": 3, "half": 3, "shrink": 3, "float32": 3, "usedin": 3, "anymor": 3, "howev": 3, "nvidia": 3, "fork": 3, "singleprecis": 3, "updat": 3, "fulli": 3, "softnmsbox": 3, "updated_scor": 3, "soft": 3, "arxiv": 3, "org": 3, "1704": 3, "04503": 3, "softnmsmethod": 3, "writetextgraph": 3, "protocol": 3, "reduc": 3, "cv2": 4, "aruco": 4, "barcod": 4, "cuda": 4, "dnn": 4}, "objects": {"cv2": [[0, 0, 0, "-", "aruco"], [1, 0, 0, "-", "barcode"], [2, 0, 0, "-", "cuda"], [3, 0, 0, "-", "dnn"]], "cv2.aruco": [[0, 1, 1, "", "ArucoDetector"], [0, 1, 1, "", "Board"], [0, 3, 1, "", "CORNER_REFINE_APRILTAG"], [0, 3, 1, "", "CORNER_REFINE_CONTOUR"], [0, 3, 1, "", "CORNER_REFINE_NONE"], [0, 3, 1, "", "CORNER_REFINE_SUBPIX"], [0, 1, 1, "", "CharucoBoard"], [0, 1, 1, "", "CharucoDetector"], [0, 1, 1, "", "CharucoParameters"], [0, 3, 1, "", "DICT_4X4_100"], [0, 3, 1, "", "DICT_4X4_1000"], [0, 3, 1, "", "DICT_4X4_250"], [0, 3, 1, "", "DICT_4X4_50"], [0, 3, 1, "", "DICT_5X5_100"], [0, 3, 1, "", "DICT_5X5_1000"], [0, 3, 1, "", "DICT_5X5_250"], [0, 3, 1, "", "DICT_5X5_50"], [0, 3, 1, "", "DICT_6X6_100"], [0, 3, 1, "", "DICT_6X6_1000"], [0, 3, 1, "", "DICT_6X6_250"], [0, 3, 1, "", "DICT_6X6_50"], [0, 3, 1, "", "DICT_7X7_100"], [0, 3, 1, "", "DICT_7X7_1000"], [0, 3, 1, "", "DICT_7X7_250"], [0, 3, 1, "", "DICT_7X7_50"], [0, 3, 1, "", "DICT_APRILTAG_16H5"], [0, 3, 1, "", "DICT_APRILTAG_16h5"], [0, 3, 1, "", "DICT_APRILTAG_25H9"], [0, 3, 1, "", "DICT_APRILTAG_25h9"], [0, 3, 1, "", "DICT_APRILTAG_36H10"], [0, 3, 1, "", "DICT_APRILTAG_36H11"], [0, 3, 1, "", "DICT_APRILTAG_36h10"], [0, 3, 1, "", "DICT_APRILTAG_36h11"], [0, 3, 1, "", "DICT_ARUCO_MIP_36H12"], [0, 3, 1, "", "DICT_ARUCO_MIP_36h12"], [0, 3, 1, "", "DICT_ARUCO_ORIGINAL"], [0, 1, 1, "", "DetectorParameters"], [0, 1, 1, "", "Dictionary"], [0, 4, 1, "", "Dictionary_getBitsFromByteList"], [0, 4, 1, "", "Dictionary_getByteListFromBits"], [0, 1, 1, "", "GridBoard"], [0, 1, 1, "", "RefineParameters"], [0, 4, 1, "", "drawDetectedCornersCharuco"], [0, 4, 1, "", "drawDetectedDiamonds"], [0, 4, 1, "", "drawDetectedMarkers"], [0, 4, 1, "", "extendDictionary"], [0, 4, 1, "", "generateImageMarker"], [0, 4, 1, "", "getPredefinedDictionary"]], "cv2.aruco.ArucoDetector": [[0, 2, 1, "", "__init__"], [0, 2, 1, "id0", "detectMarkers"], [0, 2, 1, "", "getDetectorParameters"], [0, 2, 1, "", "getDictionary"], [0, 2, 1, "", "getRefineParameters"], [0, 2, 1, "", "read"], [0, 2, 1, "id1", "refineDetectedMarkers"], [0, 2, 1, "", "setDetectorParameters"], [0, 2, 1, "", "setDictionary"], [0, 2, 1, "", "setRefineParameters"], [0, 2, 1, "", "write"]], "cv2.aruco.Board": [[0, 2, 1, "id2", "__init__"], [0, 2, 1, "id4", "generateImage"], [0, 2, 1, "", "getDictionary"], [0, 2, 1, "", "getIds"], [0, 2, 1, "", "getObjPoints"], [0, 2, 1, "", "getRightBottomCorner"], [0, 2, 1, "id3", "matchImagePoints"]], "cv2.aruco.CharucoBoard": [[0, 2, 1, "id5", "__init__"], [0, 2, 1, "id6", "checkCharucoCornersCollinear"], [0, 2, 1, "", "getChessboardCorners"], [0, 2, 1, "", "getChessboardSize"], [0, 2, 1, "", "getLegacyPattern"], [0, 2, 1, "", "getMarkerLength"], [0, 2, 1, "", "getSquareLength"], [0, 2, 1, "", "setLegacyPattern"]], "cv2.aruco.CharucoDetector": [[0, 2, 1, "", "__init__"], [0, 2, 1, "id7", "detectBoard"], [0, 2, 1, "id8", "detectDiamonds"], [0, 2, 1, "", "getBoard"], [0, 2, 1, "", "getCharucoParameters"], [0, 2, 1, "", "getDetectorParameters"], [0, 2, 1, "", "getRefineParameters"], [0, 2, 1, "", "setBoard"], [0, 2, 1, "", "setCharucoParameters"], [0, 2, 1, "", "setDetectorParameters"], [0, 2, 1, "", "setRefineParameters"]], "cv2.aruco.CharucoParameters": [[0, 2, 1, "", "__init__"], [0, 3, 1, "", "cameraMatrix"], [0, 3, 1, "", "distCoeffs"], [0, 3, 1, "", "minMarkers"], [0, 3, 1, "", "tryRefineMarkers"]], "cv2.aruco.DetectorParameters": [[0, 2, 1, "", "__init__"], [0, 3, 1, "", "adaptiveThreshConstant"], [0, 3, 1, "", "adaptiveThreshWinSizeMax"], [0, 3, 1, "", "adaptiveThreshWinSizeMin"], [0, 3, 1, "", "adaptiveThreshWinSizeStep"], [0, 3, 1, "", "aprilTagCriticalRad"], [0, 3, 1, "", "aprilTagDeglitch"], [0, 3, 1, "", "aprilTagMaxLineFitMse"], [0, 3, 1, "", "aprilTagMaxNmaxima"], [0, 3, 1, "", "aprilTagMinClusterPixels"], [0, 3, 1, "", "aprilTagMinWhiteBlackDiff"], [0, 3, 1, "", "aprilTagQuadDecimate"], [0, 3, 1, "", "aprilTagQuadSigma"], [0, 3, 1, "", "cornerRefinementMaxIterations"], [0, 3, 1, "", "cornerRefinementMethod"], [0, 3, 1, "", "cornerRefinementMinAccuracy"], [0, 3, 1, "", "cornerRefinementWinSize"], [0, 3, 1, "", "detectInvertedMarker"], [0, 3, 1, "", "errorCorrectionRate"], [0, 3, 1, "", "markerBorderBits"], [0, 3, 1, "", "maxErroneousBitsInBorderRate"], [0, 3, 1, "", "maxMarkerPerimeterRate"], [0, 3, 1, "", "minCornerDistanceRate"], [0, 3, 1, "", "minDistanceToBorder"], [0, 3, 1, "", "minGroupDistance"], [0, 3, 1, "", "minMarkerDistanceRate"], [0, 3, 1, "", "minMarkerLengthRatioOriginalImg"], [0, 3, 1, "", "minMarkerPerimeterRate"], [0, 3, 1, "", "minOtsuStdDev"], [0, 3, 1, "", "minSideLengthCanonicalImg"], [0, 3, 1, "", "perspectiveRemoveIgnoredMarginPerCell"], [0, 3, 1, "", "perspectiveRemovePixelPerCell"], [0, 3, 1, "", "polygonalApproxAccuracyRate"], [0, 2, 1, "", "readDetectorParameters"], [0, 3, 1, "", "relativeCornerRefinmentWinSize"], [0, 3, 1, "", "useAruco3Detection"], [0, 2, 1, "", "writeDetectorParameters"]], "cv2.aruco.Dictionary": [[0, 2, 1, "id9", "__init__"], [0, 3, 1, "", "bytesList"], [0, 2, 1, "id11", "generateImageMarker"], [0, 2, 1, "", "getBitsFromByteList"], [0, 2, 1, "", "getByteListFromBits"], [0, 2, 1, "id10", "getDistanceToId"], [0, 2, 1, "", "identify"], [0, 3, 1, "", "markerSize"], [0, 3, 1, "", "maxCorrectionBits"], [0, 2, 1, "", "readDictionary"], [0, 2, 1, "", "writeDictionary"]], "cv2.aruco.GridBoard": [[0, 2, 1, "id12", "__init__"], [0, 2, 1, "", "getGridSize"], [0, 2, 1, "", "getMarkerLength"], [0, 2, 1, "", "getMarkerSeparation"]], "cv2.aruco.RefineParameters": [[0, 2, 1, "", "__init__"], [0, 3, 1, "", "checkAllOrders"], [0, 3, 1, "", "errorCorrectionRate"], [0, 3, 1, "", "minRepDistance"], [0, 2, 1, "", "readRefineParameters"], [0, 2, 1, "", "writeRefineParameters"]], "cv2.barcode": [[1, 1, 1, "", "BarcodeDetector"]], "cv2.barcode.BarcodeDetector": [[1, 2, 1, "id0", "__init__"], [1, 2, 1, "id1", "decodeWithType"], [1, 2, 1, "id2", "detectAndDecodeWithType"]], "cv2.cuda": [[2, 1, 1, "", "BufferPool"], [2, 3, 1, "", "DEVICE_INFO_COMPUTE_MODE_DEFAULT"], [2, 3, 1, "", "DEVICE_INFO_COMPUTE_MODE_EXCLUSIVE"], [2, 3, 1, "", "DEVICE_INFO_COMPUTE_MODE_EXCLUSIVE_PROCESS"], [2, 3, 1, "", "DEVICE_INFO_COMPUTE_MODE_PROHIBITED"], [2, 3, 1, "", "DYNAMIC_PARALLELISM"], [2, 1, 1, "", "DeviceInfo"], [2, 3, 1, "", "DeviceInfo_ComputeModeDefault"], [2, 3, 1, "", "DeviceInfo_ComputeModeExclusive"], [2, 3, 1, "", "DeviceInfo_ComputeModeExclusiveProcess"], [2, 3, 1, "", "DeviceInfo_ComputeModeProhibited"], [2, 3, 1, "", "EVENT_BLOCKING_SYNC"], [2, 3, 1, "", "EVENT_DEFAULT"], [2, 3, 1, "", "EVENT_DISABLE_TIMING"], [2, 3, 1, "", "EVENT_INTERPROCESS"], [2, 1, 1, "", "Event"], [2, 3, 1, "", "Event_BLOCKING_SYNC"], [2, 3, 1, "", "Event_DEFAULT"], [2, 3, 1, "", "Event_DISABLE_TIMING"], [2, 3, 1, "", "Event_INTERPROCESS"], [2, 4, 1, "", "Event_elapsedTime"], [2, 3, 1, "", "FEATURE_SET_COMPUTE_10"], [2, 3, 1, "", "FEATURE_SET_COMPUTE_11"], [2, 3, 1, "", "FEATURE_SET_COMPUTE_12"], [2, 3, 1, "", "FEATURE_SET_COMPUTE_13"], [2, 3, 1, "", "FEATURE_SET_COMPUTE_20"], [2, 3, 1, "", "FEATURE_SET_COMPUTE_21"], [2, 3, 1, "", "FEATURE_SET_COMPUTE_30"], [2, 3, 1, "", "FEATURE_SET_COMPUTE_32"], [2, 3, 1, "", "FEATURE_SET_COMPUTE_35"], [2, 3, 1, "", "FEATURE_SET_COMPUTE_50"], [2, 3, 1, "", "GLOBAL_ATOMICS"], [2, 1, 1, "", "GpuData"], [2, 1, 1, "", "GpuMat"], [2, 1, 1, "", "GpuMatND"], [2, 4, 1, "", "GpuMat_defaultAllocator"], [2, 4, 1, "", "GpuMat_setDefaultAllocator"], [2, 3, 1, "", "HOST_MEM_PAGE_LOCKED"], [2, 3, 1, "", "HOST_MEM_SHARED"], [2, 3, 1, "", "HOST_MEM_WRITE_COMBINED"], [2, 1, 1, "", "HostMem"], [2, 3, 1, "", "HostMem_PAGE_LOCKED"], [2, 3, 1, "", "HostMem_SHARED"], [2, 3, 1, "", "HostMem_WRITE_COMBINED"], [2, 3, 1, "", "NATIVE_DOUBLE"], [2, 3, 1, "", "SHARED_ATOMICS"], [2, 1, 1, "", "Stream"], [2, 4, 1, "", "Stream_Null"], [2, 1, 1, "", "TargetArchs"], [2, 4, 1, "", "TargetArchs_has"], [2, 4, 1, "", "TargetArchs_hasBin"], [2, 4, 1, "", "TargetArchs_hasEqualOrGreater"], [2, 4, 1, "", "TargetArchs_hasEqualOrGreaterBin"], [2, 4, 1, "", "TargetArchs_hasEqualOrGreaterPtx"], [2, 4, 1, "", "TargetArchs_hasEqualOrLessPtx"], [2, 4, 1, "", "TargetArchs_hasPtx"], [2, 3, 1, "", "WARP_SHUFFLE_FUNCTIONS"], [2, 4, 1, "", "createContinuous"], [2, 4, 1, "", "createGpuMatFromCudaMemory"], [2, 4, 1, "", "ensureSizeIsEnough"], [2, 4, 1, "", "fastNlMeansDenoising"], [2, 4, 1, "", "fastNlMeansDenoisingColored"], [2, 4, 1, "", "getCudaEnabledDeviceCount"], [2, 4, 1, "", "getDevice"], [2, 4, 1, "", "nonLocalMeans"], [2, 4, 1, "", "printCudaDeviceInfo"], [2, 4, 1, "", "printShortCudaDeviceInfo"], [2, 4, 1, "", "registerPageLocked"], [2, 4, 1, "", "resetDevice"], [2, 4, 1, "", "setBufferPoolConfig"], [2, 4, 1, "", "setBufferPoolUsage"], [2, 4, 1, "", "setDevice"], [2, 4, 1, "", "unregisterPageLocked"], [2, 4, 1, "", "wrapStream"]], "cv2.cuda.BufferPool": [[2, 2, 1, "", "__init__"], [2, 2, 1, "", "getAllocator"], [2, 2, 1, "id0", "getBuffer"]], "cv2.cuda.DeviceInfo": [[2, 2, 1, "", "ECCEnabled"], [2, 2, 1, "id1", "__init__"], [2, 2, 1, "", "asyncEngineCount"], [2, 2, 1, "", "canMapHostMemory"], [2, 2, 1, "", "clockRate"], [2, 2, 1, "", "computeMode"], [2, 2, 1, "", "concurrentKernels"], [2, 2, 1, "", "deviceID"], [2, 2, 1, "", "freeMemory"], [2, 2, 1, "", "integrated"], [2, 2, 1, "", "isCompatible"], [2, 2, 1, "", "kernelExecTimeoutEnabled"], [2, 2, 1, "", "l2CacheSize"], [2, 2, 1, "", "majorVersion"], [2, 2, 1, "", "maxGridSize"], [2, 2, 1, "", "maxSurface1D"], [2, 2, 1, "", "maxSurface1DLayered"], [2, 2, 1, "", "maxSurface2D"], [2, 2, 1, "", "maxSurface2DLayered"], [2, 2, 1, "", "maxSurface3D"], [2, 2, 1, "", "maxSurfaceCubemap"], [2, 2, 1, "", "maxSurfaceCubemapLayered"], [2, 2, 1, "", "maxTexture1D"], [2, 2, 1, "", "maxTexture1DLayered"], [2, 2, 1, "", "maxTexture1DLinear"], [2, 2, 1, "", "maxTexture1DMipmap"], [2, 2, 1, "", "maxTexture2D"], [2, 2, 1, "", "maxTexture2DGather"], [2, 2, 1, "", "maxTexture2DLayered"], [2, 2, 1, "", "maxTexture2DLinear"], [2, 2, 1, "", "maxTexture2DMipmap"], [2, 2, 1, "", "maxTexture3D"], [2, 2, 1, "", "maxTextureCubemap"], [2, 2, 1, "", "maxTextureCubemapLayered"], [2, 2, 1, "", "maxThreadsDim"], [2, 2, 1, "", "maxThreadsPerBlock"], [2, 2, 1, "", "maxThreadsPerMultiProcessor"], [2, 2, 1, "", "memPitch"], [2, 2, 1, "", "memoryBusWidth"], [2, 2, 1, "", "memoryClockRate"], [2, 2, 1, "", "minorVersion"], [2, 2, 1, "", "multiProcessorCount"], [2, 2, 1, "", "pciBusID"], [2, 2, 1, "", "pciDeviceID"], [2, 2, 1, "", "pciDomainID"], [2, 2, 1, "", "queryMemory"], [2, 2, 1, "", "regsPerBlock"], [2, 2, 1, "", "sharedMemPerBlock"], [2, 2, 1, "", "surfaceAlignment"], [2, 2, 1, "", "tccDriver"], [2, 2, 1, "", "textureAlignment"], [2, 2, 1, "", "texturePitchAlignment"], [2, 2, 1, "", "totalConstMem"], [2, 2, 1, "", "totalGlobalMem"], [2, 2, 1, "", "totalMemory"], [2, 2, 1, "", "unifiedAddressing"], [2, 2, 1, "", "warpSize"]], "cv2.cuda.Event": [[2, 2, 1, "", "__init__"], [2, 2, 1, "", "elapsedTime"], [2, 2, 1, "", "queryIfComplete"], [2, 2, 1, "", "record"], [2, 2, 1, "", "waitForCompletion"]], "cv2.cuda.GpuMat": [[2, 2, 1, "id11", "__init__"], [2, 2, 1, "", "adjustROI"], [2, 2, 1, "", "assignTo"], [2, 2, 1, "", "channels"], [2, 2, 1, "", "clone"], [2, 2, 1, "", "col"], [2, 2, 1, "id36", "colRange"], [2, 2, 1, "id34", "convertTo"], [2, 2, 1, "id25", "copyTo"], [2, 2, 1, "id12", "create"], [2, 2, 1, "", "cudaPtr"], [2, 2, 1, "", "defaultAllocator"], [2, 2, 1, "", "depth"], [2, 2, 1, "id22", "download"], [2, 2, 1, "", "elemSize"], [2, 2, 1, "", "elemSize1"], [2, 2, 1, "", "empty"], [2, 2, 1, "", "isContinuous"], [2, 2, 1, "", "locateROI"], [2, 2, 1, "", "release"], [2, 2, 1, "", "reshape"], [2, 2, 1, "", "row"], [2, 2, 1, "id35", "rowRange"], [2, 2, 1, "", "setDefaultAllocator"], [2, 2, 1, "id32", "setTo"], [2, 2, 1, "", "size"], [2, 2, 1, "", "step"], [2, 2, 1, "", "step1"], [2, 2, 1, "", "swap"], [2, 2, 1, "", "type"], [2, 2, 1, "", "updateContinuityFlag"], [2, 2, 1, "id17", "upload"]], "cv2.cuda.HostMem": [[2, 2, 1, "id41", "__init__"], [2, 2, 1, "", "channels"], [2, 2, 1, "", "clone"], [2, 2, 1, "", "create"], [2, 2, 1, "", "createMatHeader"], [2, 2, 1, "", "depth"], [2, 2, 1, "", "elemSize"], [2, 2, 1, "", "elemSize1"], [2, 2, 1, "", "empty"], [2, 2, 1, "", "isContinuous"], [2, 2, 1, "", "reshape"], [2, 2, 1, "", "size"], [2, 2, 1, "", "step"], [2, 2, 1, "", "step1"], [2, 2, 1, "", "swap"], [2, 2, 1, "", "type"]], "cv2.cuda.Stream": [[2, 2, 1, "", "Null"], [2, 2, 1, "id43", "__init__"], [2, 2, 1, "", "cudaPtr"], [2, 2, 1, "", "queryIfComplete"], [2, 2, 1, "", "waitEvent"], [2, 2, 1, "", "waitForCompletion"]], "cv2.cuda.TargetArchs": [[2, 2, 1, "", "has"], [2, 2, 1, "", "hasBin"], [2, 2, 1, "", "hasEqualOrGreater"], [2, 2, 1, "", "hasEqualOrGreaterBin"], [2, 2, 1, "", "hasEqualOrGreaterPtx"], [2, 2, 1, "", "hasEqualOrLessPtx"], [2, 2, 1, "", "hasPtx"]], "cv2.dnn": [[3, 1, 1, "", "ClassificationModel"], [3, 3, 1, "", "DNN_BACKEND_CANN"], [3, 3, 1, "", "DNN_BACKEND_CUDA"], [3, 3, 1, "", "DNN_BACKEND_DEFAULT"], [3, 3, 1, "", "DNN_BACKEND_HALIDE"], [3, 3, 1, "", "DNN_BACKEND_INFERENCE_ENGINE"], [3, 3, 1, "", "DNN_BACKEND_OPENCV"], [3, 3, 1, "", "DNN_BACKEND_TIMVX"], [3, 3, 1, "", "DNN_BACKEND_VKCOM"], [3, 3, 1, "", "DNN_BACKEND_WEBNN"], [3, 3, 1, "", "DNN_LAYOUT_NCDHW"], [3, 3, 1, "", "DNN_LAYOUT_NCHW"], [3, 3, 1, "", "DNN_LAYOUT_ND"], [3, 3, 1, "", "DNN_LAYOUT_NDHWC"], [3, 3, 1, "", "DNN_LAYOUT_NHWC"], [3, 3, 1, "", "DNN_LAYOUT_PLANAR"], [3, 3, 1, "", "DNN_LAYOUT_UNKNOWN"], [3, 3, 1, "", "DNN_PMODE_CROP_CENTER"], [3, 3, 1, "", "DNN_PMODE_LETTERBOX"], [3, 3, 1, "", "DNN_PMODE_NULL"], [3, 3, 1, "", "DNN_TARGET_CPU"], [3, 3, 1, "", "DNN_TARGET_CPU_FP16"], [3, 3, 1, "", "DNN_TARGET_CUDA"], [3, 3, 1, "", "DNN_TARGET_CUDA_FP16"], [3, 3, 1, "", "DNN_TARGET_FPGA"], [3, 3, 1, "", "DNN_TARGET_HDDL"], [3, 3, 1, "", "DNN_TARGET_MYRIAD"], [3, 3, 1, "", "DNN_TARGET_NPU"], [3, 3, 1, "", "DNN_TARGET_OPENCL"], [3, 3, 1, "", "DNN_TARGET_OPENCL_FP16"], [3, 3, 1, "", "DNN_TARGET_VULKAN"], [3, 1, 1, "", "DetectionModel"], [3, 1, 1, "", "DictValue"], [3, 1, 1, "", "Image2BlobParams"], [3, 1, 1, "", "KeypointsModel"], [3, 1, 1, "", "Layer"], [3, 1, 1, "", "Model"], [3, 4, 1, "", "NMSBoxes"], [3, 4, 1, "", "NMSBoxesBatched"], [3, 4, 1, "", "NMSBoxesRotated"], [3, 1, 1, "", "Net"], [3, 4, 1, "", "Net_readFromModelOptimizer"], [3, 3, 1, "", "SOFT_NMSMETHOD_SOFTNMS_GAUSSIAN"], [3, 3, 1, "", "SOFT_NMSMETHOD_SOFTNMS_LINEAR"], [3, 1, 1, "", "SegmentationModel"], [3, 3, 1, "", "SoftNMSMethod_SOFTNMS_GAUSSIAN"], [3, 3, 1, "", "SoftNMSMethod_SOFTNMS_LINEAR"], [3, 1, 1, "", "TextDetectionModel"], [3, 1, 1, "", "TextDetectionModel_DB"], [3, 1, 1, "", "TextDetectionModel_EAST"], [3, 1, 1, "", "TextRecognitionModel"], [3, 4, 1, "", "blobFromImage"], [3, 4, 1, "", "blobFromImageWithParams"], [3, 4, 1, "", "blobFromImages"], [3, 4, 1, "", "blobFromImagesWithParams"], [3, 4, 1, "", "getAvailableTargets"], [3, 4, 1, "", "imagesFromBlob"], [3, 4, 1, "", "readNet"], [3, 4, 1, "", "readNetFromCaffe"], [3, 4, 1, "", "readNetFromDarknet"], [3, 4, 1, "", "readNetFromModelOptimizer"], [3, 4, 1, "", "readNetFromONNX"], [3, 4, 1, "", "readNetFromTFLite"], [3, 4, 1, "", "readNetFromTensorflow"], [3, 4, 1, "", "readNetFromTorch"], [3, 4, 1, "", "readTensorFromONNX"], [3, 4, 1, "", "readTorchBlob"], [3, 4, 1, "", "shrinkCaffeModel"], [3, 4, 1, "", "softNMSBoxes"], [3, 4, 1, "", "writeTextGraph"]], "cv2.dnn.ClassificationModel": [[3, 2, 1, "id0", "__init__"], [3, 2, 1, "id1", "classify"], [3, 2, 1, "", "getEnableSoftmaxPostProcessing"], [3, 2, 1, "", "setEnableSoftmaxPostProcessing"]], "cv2.dnn.DetectionModel": [[3, 2, 1, "id2", "__init__"], [3, 2, 1, "id3", "detect"], [3, 2, 1, "", "getNmsAcrossClasses"], [3, 2, 1, "", "setNmsAcrossClasses"]], "cv2.dnn.DictValue": [[3, 2, 1, "id5", "__init__"], [3, 2, 1, "", "getIntValue"], [3, 2, 1, "", "getRealValue"], [3, 2, 1, "", "getStringValue"], [3, 2, 1, "", "isInt"], [3, 2, 1, "", "isReal"], [3, 2, 1, "", "isString"]], "cv2.dnn.Image2BlobParams": [[3, 2, 1, "id6", "__init__"], [3, 2, 1, "", "blobRectToImageRect"], [3, 2, 1, "", "blobRectsToImageRects"], [3, 3, 1, "", "borderValue"], [3, 3, 1, "", "datalayout"], [3, 3, 1, "", "ddepth"], [3, 3, 1, "", "mean"], [3, 3, 1, "", "paddingmode"], [3, 3, 1, "", "scalefactor"], [3, 3, 1, "", "size"], [3, 3, 1, "", "swapRB"]], "cv2.dnn.KeypointsModel": [[3, 2, 1, "id7", "__init__"], [3, 2, 1, "id8", "estimate"]], "cv2.dnn.Layer": [[3, 3, 1, "", "blobs"], [3, 2, 1, "id9", "finalize"], [3, 2, 1, "", "name"], [3, 2, 1, "", "outputNameToIndex"], [3, 2, 1, "", "preferableTarget"], [3, 2, 1, "", "run"], [3, 2, 1, "", "type"]], "cv2.dnn.Model": [[3, 2, 1, "id10", "__init__"], [3, 2, 1, "", "enableWinograd"], [3, 2, 1, "id12", "predict"], [3, 2, 1, "", "setInputCrop"], [3, 2, 1, "", "setInputMean"], [3, 2, 1, "", "setInputParams"], [3, 2, 1, "", "setInputScale"], [3, 2, 1, "id11", "setInputSize"], [3, 2, 1, "", "setInputSwapRB"], [3, 2, 1, "", "setPreferableBackend"], [3, 2, 1, "", "setPreferableTarget"]], "cv2.dnn.Net": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "connect"], [3, 2, 1, "", "dump"], [3, 2, 1, "", "dumpToFile"], [3, 2, 1, "", "empty"], [3, 2, 1, "", "enableFusion"], [3, 2, 1, "", "enableWinograd"], [3, 2, 1, "id19", "forward"], [3, 2, 1, "", "forwardAndRetrieve"], [3, 2, 1, "", "forwardAsync"], [3, 2, 1, "id27", "getFLOPS"], [3, 2, 1, "", "getInputDetails"], [3, 2, 1, "id15", "getLayer"], [3, 2, 1, "", "getLayerId"], [3, 2, 1, "", "getLayerNames"], [3, 2, 1, "", "getLayerTypes"], [3, 2, 1, "", "getLayersCount"], [3, 2, 1, "id24", "getLayersShapes"], [3, 2, 1, "id29", "getMemoryConsumption"], [3, 2, 1, "", "getOutputDetails"], [3, 2, 1, "id23", "getParam"], [3, 2, 1, "", "getPerfProfile"], [3, 2, 1, "", "getUnconnectedOutLayers"], [3, 2, 1, "", "getUnconnectedOutLayersNames"], [3, 2, 1, "id20", "quantize"], [3, 2, 1, "id13", "readFromModelOptimizer"], [3, 2, 1, "", "setHalideScheduler"], [3, 2, 1, "id21", "setInput"], [3, 2, 1, "", "setInputShape"], [3, 2, 1, "", "setInputsNames"], [3, 2, 1, "id22", "setParam"], [3, 2, 1, "", "setPreferableBackend"], [3, 2, 1, "", "setPreferableTarget"]], "cv2.dnn.SegmentationModel": [[3, 2, 1, "id30", "__init__"], [3, 2, 1, "id31", "segment"]], "cv2.dnn.TextDetectionModel": [[3, 2, 1, "id34", "detect"], [3, 2, 1, "id37", "detectTextRectangles"]], "cv2.dnn.TextDetectionModel_DB": [[3, 2, 1, "id38", "__init__"], [3, 2, 1, "", "getBinaryThreshold"], [3, 2, 1, "", "getMaxCandidates"], [3, 2, 1, "", "getPolygonThreshold"], [3, 2, 1, "", "getUnclipRatio"], [3, 2, 1, "", "setBinaryThreshold"], [3, 2, 1, "", "setMaxCandidates"], [3, 2, 1, "", "setPolygonThreshold"], [3, 2, 1, "", "setUnclipRatio"]], "cv2.dnn.TextDetectionModel_EAST": [[3, 2, 1, "id39", "__init__"], [3, 2, 1, "", "getConfidenceThreshold"], [3, 2, 1, "", "getNMSThreshold"], [3, 2, 1, "", "setConfidenceThreshold"], [3, 2, 1, "", "setNMSThreshold"]], "cv2.dnn.TextRecognitionModel": [[3, 2, 1, "id40", "__init__"], [3, 2, 1, "", "getDecodeType"], [3, 2, 1, "", "getVocabulary"], [3, 2, 1, "id43", "recognize"], [3, 2, 1, "", "setDecodeOptsCTCPrefixBeamSearch"], [3, 2, 1, "", "setDecodeType"], [3, 2, 1, "", "setVocabulary"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"]}, "titleterms": {"cv2": [0, 1, 2, 3], "aruco": 0, "attribut": [0, 1, 2, 3], "class": [0, 1, 2, 3], "function": [0, 1, 2, 3], "barcod": 1, "cuda": 2, "dnn": 3, "opencv": 4, "python": 4, "api": 4, "content": 4}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"cv2.aruco": [[0, "module-cv2.aruco"]], "Attributes": [[0, "attributes"], [1, "attributes"], [2, "attributes"], [3, "attributes"]], "Classes": [[0, "classes"], [1, "classes"], [2, "classes"], [3, "classes"]], "Functions": [[0, "functions"], [1, "functions"], [2, "functions"], [3, "functions"]], "cv2.barcode": [[1, "module-cv2.barcode"]], "cv2.cuda": [[2, "module-cv2.cuda"]], "cv2.dnn": [[3, "module-cv2.dnn"]], "OpenCV Python API": [[4, "opencv-python-api"]], "Contents": [[4, null]]}, "indexentries": {"arucodetector (class in cv2.aruco)": [[0, "cv2.aruco.ArucoDetector"]], "board (class in cv2.aruco)": [[0, "cv2.aruco.Board"]], "corner_refine_apriltag (in module cv2.aruco)": [[0, "cv2.aruco.CORNER_REFINE_APRILTAG"]], "corner_refine_contour (in module cv2.aruco)": [[0, "cv2.aruco.CORNER_REFINE_CONTOUR"]], "corner_refine_none (in module cv2.aruco)": [[0, "cv2.aruco.CORNER_REFINE_NONE"]], "corner_refine_subpix (in module cv2.aruco)": [[0, "cv2.aruco.CORNER_REFINE_SUBPIX"]], "charucoboard (class in cv2.aruco)": [[0, "cv2.aruco.CharucoBoard"]], "charucodetector (class in cv2.aruco)": [[0, "cv2.aruco.CharucoDetector"]], "charucoparameters (class in cv2.aruco)": [[0, "cv2.aruco.CharucoParameters"]], "dict_4x4_100 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_4X4_100"]], "dict_4x4_1000 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_4X4_1000"]], "dict_4x4_250 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_4X4_250"]], "dict_4x4_50 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_4X4_50"]], "dict_5x5_100 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_5X5_100"]], "dict_5x5_1000 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_5X5_1000"]], "dict_5x5_250 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_5X5_250"]], "dict_5x5_50 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_5X5_50"]], "dict_6x6_100 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_6X6_100"]], "dict_6x6_1000 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_6X6_1000"]], "dict_6x6_250 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_6X6_250"]], "dict_6x6_50 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_6X6_50"]], "dict_7x7_100 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_7X7_100"]], "dict_7x7_1000 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_7X7_1000"]], "dict_7x7_250 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_7X7_250"]], "dict_7x7_50 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_7X7_50"]], "dict_apriltag_16h5 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_APRILTAG_16H5"], [0, "cv2.aruco.DICT_APRILTAG_16h5"]], "dict_apriltag_25h9 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_APRILTAG_25H9"], [0, "cv2.aruco.DICT_APRILTAG_25h9"]], "dict_apriltag_36h10 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_APRILTAG_36H10"], [0, "cv2.aruco.DICT_APRILTAG_36h10"]], "dict_apriltag_36h11 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_APRILTAG_36H11"], [0, "cv2.aruco.DICT_APRILTAG_36h11"]], "dict_aruco_mip_36h12 (in module cv2.aruco)": [[0, "cv2.aruco.DICT_ARUCO_MIP_36H12"], [0, "cv2.aruco.DICT_ARUCO_MIP_36h12"]], "dict_aruco_original (in module cv2.aruco)": [[0, "cv2.aruco.DICT_ARUCO_ORIGINAL"]], "detectorparameters (class in cv2.aruco)": [[0, "cv2.aruco.DetectorParameters"]], "dictionary (class in cv2.aruco)": [[0, "cv2.aruco.Dictionary"]], "dictionary_getbitsfrombytelist() (in module cv2.aruco)": [[0, "cv2.aruco.Dictionary_getBitsFromByteList"]], "dictionary_getbytelistfrombits() (in module cv2.aruco)": [[0, "cv2.aruco.Dictionary_getByteListFromBits"]], "gridboard (class in cv2.aruco)": [[0, "cv2.aruco.GridBoard"]], "refineparameters (class in cv2.aruco)": [[0, "cv2.aruco.RefineParameters"]], "__init__() (cv2.aruco.arucodetector method)": [[0, "cv2.aruco.ArucoDetector.__init__"]], "__init__() (cv2.aruco.board method)": [[0, "cv2.aruco.Board.__init__"], [0, "id2"]], "__init__() (cv2.aruco.charucoboard method)": [[0, "cv2.aruco.CharucoBoard.__init__"], [0, "id5"]], "__init__() (cv2.aruco.charucodetector method)": [[0, "cv2.aruco.CharucoDetector.__init__"]], "__init__() (cv2.aruco.charucoparameters method)": [[0, "cv2.aruco.CharucoParameters.__init__"]], "__init__() (cv2.aruco.detectorparameters method)": [[0, "cv2.aruco.DetectorParameters.__init__"]], "__init__() (cv2.aruco.dictionary method)": [[0, "cv2.aruco.Dictionary.__init__"], [0, "id9"]], "__init__() (cv2.aruco.gridboard method)": [[0, "cv2.aruco.GridBoard.__init__"], [0, "id12"]], "__init__() (cv2.aruco.refineparameters method)": [[0, "cv2.aruco.RefineParameters.__init__"]], "adaptivethreshconstant (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.adaptiveThreshConstant"]], "adaptivethreshwinsizemax (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.adaptiveThreshWinSizeMax"]], "adaptivethreshwinsizemin (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.adaptiveThreshWinSizeMin"]], "adaptivethreshwinsizestep (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.adaptiveThreshWinSizeStep"]], "apriltagcriticalrad (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.aprilTagCriticalRad"]], "apriltagdeglitch (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.aprilTagDeglitch"]], "apriltagmaxlinefitmse (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.aprilTagMaxLineFitMse"]], "apriltagmaxnmaxima (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.aprilTagMaxNmaxima"]], "apriltagminclusterpixels (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.aprilTagMinClusterPixels"]], "apriltagminwhiteblackdiff (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.aprilTagMinWhiteBlackDiff"]], "apriltagquaddecimate (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.aprilTagQuadDecimate"]], "apriltagquadsigma (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.aprilTagQuadSigma"]], "byteslist (cv2.aruco.dictionary attribute)": [[0, "cv2.aruco.Dictionary.bytesList"]], "cameramatrix (cv2.aruco.charucoparameters attribute)": [[0, "cv2.aruco.CharucoParameters.cameraMatrix"]], "checkallorders (cv2.aruco.refineparameters attribute)": [[0, "cv2.aruco.RefineParameters.checkAllOrders"]], "checkcharucocornerscollinear() (cv2.aruco.charucoboard method)": [[0, "cv2.aruco.CharucoBoard.checkCharucoCornersCollinear"], [0, "id6"]], "cornerrefinementmaxiterations (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.cornerRefinementMaxIterations"]], "cornerrefinementmethod (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.cornerRefinementMethod"]], "cornerrefinementminaccuracy (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.cornerRefinementMinAccuracy"]], "cornerrefinementwinsize (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.cornerRefinementWinSize"]], "cv2.aruco": [[0, "module-cv2.aruco"]], "detectboard() (cv2.aruco.charucodetector method)": [[0, "cv2.aruco.CharucoDetector.detectBoard"], [0, "id7"]], "detectdiamonds() (cv2.aruco.charucodetector method)": [[0, "cv2.aruco.CharucoDetector.detectDiamonds"], [0, "id8"]], "detectinvertedmarker (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.detectInvertedMarker"]], "detectmarkers() (cv2.aruco.arucodetector method)": [[0, "cv2.aruco.ArucoDetector.detectMarkers"], [0, "id0"]], "distcoeffs (cv2.aruco.charucoparameters attribute)": [[0, "cv2.aruco.CharucoParameters.distCoeffs"]], "drawdetectedcornerscharuco() (in module cv2.aruco)": [[0, "cv2.aruco.drawDetectedCornersCharuco"]], "drawdetecteddiamonds() (in module cv2.aruco)": [[0, "cv2.aruco.drawDetectedDiamonds"]], "drawdetectedmarkers() (in module cv2.aruco)": [[0, "cv2.aruco.drawDetectedMarkers"]], "errorcorrectionrate (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.errorCorrectionRate"]], "errorcorrectionrate (cv2.aruco.refineparameters attribute)": [[0, "cv2.aruco.RefineParameters.errorCorrectionRate"]], "extenddictionary() (in module cv2.aruco)": [[0, "cv2.aruco.extendDictionary"]], "generateimage() (cv2.aruco.board method)": [[0, "cv2.aruco.Board.generateImage"], [0, "id4"]], "generateimagemarker() (cv2.aruco.dictionary method)": [[0, "cv2.aruco.Dictionary.generateImageMarker"], [0, "id11"]], "generateimagemarker() (in module cv2.aruco)": [[0, "cv2.aruco.generateImageMarker"]], "getbitsfrombytelist() (cv2.aruco.dictionary static method)": [[0, "cv2.aruco.Dictionary.getBitsFromByteList"]], "getboard() (cv2.aruco.charucodetector method)": [[0, "cv2.aruco.CharucoDetector.getBoard"]], "getbytelistfrombits() (cv2.aruco.dictionary static method)": [[0, "cv2.aruco.Dictionary.getByteListFromBits"]], "getcharucoparameters() (cv2.aruco.charucodetector method)": [[0, "cv2.aruco.CharucoDetector.getCharucoParameters"]], "getchessboardcorners() (cv2.aruco.charucoboard method)": [[0, "cv2.aruco.CharucoBoard.getChessboardCorners"]], "getchessboardsize() (cv2.aruco.charucoboard method)": [[0, "cv2.aruco.CharucoBoard.getChessboardSize"]], "getdetectorparameters() (cv2.aruco.arucodetector method)": [[0, "cv2.aruco.ArucoDetector.getDetectorParameters"]], "getdetectorparameters() (cv2.aruco.charucodetector method)": [[0, "cv2.aruco.CharucoDetector.getDetectorParameters"]], "getdictionary() (cv2.aruco.arucodetector method)": [[0, "cv2.aruco.ArucoDetector.getDictionary"]], "getdictionary() (cv2.aruco.board method)": [[0, "cv2.aruco.Board.getDictionary"]], "getdistancetoid() (cv2.aruco.dictionary method)": [[0, "cv2.aruco.Dictionary.getDistanceToId"], [0, "id10"]], "getgridsize() (cv2.aruco.gridboard method)": [[0, "cv2.aruco.GridBoard.getGridSize"]], "getids() (cv2.aruco.board method)": [[0, "cv2.aruco.Board.getIds"]], "getlegacypattern() (cv2.aruco.charucoboard method)": [[0, "cv2.aruco.CharucoBoard.getLegacyPattern"]], "getmarkerlength() (cv2.aruco.charucoboard method)": [[0, "cv2.aruco.CharucoBoard.getMarkerLength"]], "getmarkerlength() (cv2.aruco.gridboard method)": [[0, "cv2.aruco.GridBoard.getMarkerLength"]], "getmarkerseparation() (cv2.aruco.gridboard method)": [[0, "cv2.aruco.GridBoard.getMarkerSeparation"]], "getobjpoints() (cv2.aruco.board method)": [[0, "cv2.aruco.Board.getObjPoints"]], "getpredefineddictionary() (in module cv2.aruco)": [[0, "cv2.aruco.getPredefinedDictionary"]], "getrefineparameters() (cv2.aruco.arucodetector method)": [[0, "cv2.aruco.ArucoDetector.getRefineParameters"]], "getrefineparameters() (cv2.aruco.charucodetector method)": [[0, "cv2.aruco.CharucoDetector.getRefineParameters"]], "getrightbottomcorner() (cv2.aruco.board method)": [[0, "cv2.aruco.Board.getRightBottomCorner"]], "getsquarelength() (cv2.aruco.charucoboard method)": [[0, "cv2.aruco.CharucoBoard.getSquareLength"]], "identify() (cv2.aruco.dictionary method)": [[0, "cv2.aruco.Dictionary.identify"]], "markerborderbits (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.markerBorderBits"]], "markersize (cv2.aruco.dictionary attribute)": [[0, "cv2.aruco.Dictionary.markerSize"]], "matchimagepoints() (cv2.aruco.board method)": [[0, "cv2.aruco.Board.matchImagePoints"], [0, "id3"]], "maxcorrectionbits (cv2.aruco.dictionary attribute)": [[0, "cv2.aruco.Dictionary.maxCorrectionBits"]], "maxerroneousbitsinborderrate (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.maxErroneousBitsInBorderRate"]], "maxmarkerperimeterrate (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.maxMarkerPerimeterRate"]], "mincornerdistancerate (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.minCornerDistanceRate"]], "mindistancetoborder (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.minDistanceToBorder"]], "mingroupdistance (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.minGroupDistance"]], "minmarkerdistancerate (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.minMarkerDistanceRate"]], "minmarkerlengthratiooriginalimg (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.minMarkerLengthRatioOriginalImg"]], "minmarkerperimeterrate (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.minMarkerPerimeterRate"]], "minmarkers (cv2.aruco.charucoparameters attribute)": [[0, "cv2.aruco.CharucoParameters.minMarkers"]], "minotsustddev (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.minOtsuStdDev"]], "minrepdistance (cv2.aruco.refineparameters attribute)": [[0, "cv2.aruco.RefineParameters.minRepDistance"]], "minsidelengthcanonicalimg (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.minSideLengthCanonicalImg"]], "module": [[0, "module-cv2.aruco"], [1, "module-cv2.barcode"], [2, "module-cv2.cuda"], [3, "module-cv2.dnn"]], "perspectiveremoveignoredmarginpercell (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.perspectiveRemoveIgnoredMarginPerCell"]], "perspectiveremovepixelpercell (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.perspectiveRemovePixelPerCell"]], "polygonalapproxaccuracyrate (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.polygonalApproxAccuracyRate"]], "read() (cv2.aruco.arucodetector method)": [[0, "cv2.aruco.ArucoDetector.read"]], "readdetectorparameters() (cv2.aruco.detectorparameters method)": [[0, "cv2.aruco.DetectorParameters.readDetectorParameters"]], "readdictionary() (cv2.aruco.dictionary method)": [[0, "cv2.aruco.Dictionary.readDictionary"]], "readrefineparameters() (cv2.aruco.refineparameters method)": [[0, "cv2.aruco.RefineParameters.readRefineParameters"]], "refinedetectedmarkers() (cv2.aruco.arucodetector method)": [[0, "cv2.aruco.ArucoDetector.refineDetectedMarkers"], [0, "id1"]], "relativecornerrefinmentwinsize (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.relativeCornerRefinmentWinSize"]], "setboard() (cv2.aruco.charucodetector method)": [[0, "cv2.aruco.CharucoDetector.setBoard"]], "setcharucoparameters() (cv2.aruco.charucodetector method)": [[0, "cv2.aruco.CharucoDetector.setCharucoParameters"]], "setdetectorparameters() (cv2.aruco.arucodetector method)": [[0, "cv2.aruco.ArucoDetector.setDetectorParameters"]], "setdetectorparameters() (cv2.aruco.charucodetector method)": [[0, "cv2.aruco.CharucoDetector.setDetectorParameters"]], "setdictionary() (cv2.aruco.arucodetector method)": [[0, "cv2.aruco.ArucoDetector.setDictionary"]], "setlegacypattern() (cv2.aruco.charucoboard method)": [[0, "cv2.aruco.CharucoBoard.setLegacyPattern"]], "setrefineparameters() (cv2.aruco.arucodetector method)": [[0, "cv2.aruco.ArucoDetector.setRefineParameters"]], "setrefineparameters() (cv2.aruco.charucodetector method)": [[0, "cv2.aruco.CharucoDetector.setRefineParameters"]], "tryrefinemarkers (cv2.aruco.charucoparameters attribute)": [[0, "cv2.aruco.CharucoParameters.tryRefineMarkers"]], "usearuco3detection (cv2.aruco.detectorparameters attribute)": [[0, "cv2.aruco.DetectorParameters.useAruco3Detection"]], "write() (cv2.aruco.arucodetector method)": [[0, "cv2.aruco.ArucoDetector.write"]], "writedetectorparameters() (cv2.aruco.detectorparameters method)": [[0, "cv2.aruco.DetectorParameters.writeDetectorParameters"]], "writedictionary() (cv2.aruco.dictionary method)": [[0, "cv2.aruco.Dictionary.writeDictionary"]], "writerefineparameters() (cv2.aruco.refineparameters method)": [[0, "cv2.aruco.RefineParameters.writeRefineParameters"]], "barcodedetector (class in cv2.barcode)": [[1, "cv2.barcode.BarcodeDetector"]], "__init__() (cv2.barcode.barcodedetector method)": [[1, "cv2.barcode.BarcodeDetector.__init__"], [1, "id0"]], "cv2.barcode": [[1, "module-cv2.barcode"]], "decodewithtype() (cv2.barcode.barcodedetector method)": [[1, "cv2.barcode.BarcodeDetector.decodeWithType"], [1, "id1"]], "detectanddecodewithtype() (cv2.barcode.barcodedetector method)": [[1, "cv2.barcode.BarcodeDetector.detectAndDecodeWithType"], [1, "id2"]], "bufferpool (class in cv2.cuda)": [[2, "cv2.cuda.BufferPool"]], "device_info_compute_mode_default (in module cv2.cuda)": [[2, "cv2.cuda.DEVICE_INFO_COMPUTE_MODE_DEFAULT"]], "device_info_compute_mode_exclusive (in module cv2.cuda)": [[2, "cv2.cuda.DEVICE_INFO_COMPUTE_MODE_EXCLUSIVE"]], "device_info_compute_mode_exclusive_process (in module cv2.cuda)": [[2, "cv2.cuda.DEVICE_INFO_COMPUTE_MODE_EXCLUSIVE_PROCESS"]], "device_info_compute_mode_prohibited (in module cv2.cuda)": [[2, "cv2.cuda.DEVICE_INFO_COMPUTE_MODE_PROHIBITED"]], "dynamic_parallelism (in module cv2.cuda)": [[2, "cv2.cuda.DYNAMIC_PARALLELISM"]], "deviceinfo (class in cv2.cuda)": [[2, "cv2.cuda.DeviceInfo"]], "deviceinfo_computemodedefault (in module cv2.cuda)": [[2, "cv2.cuda.DeviceInfo_ComputeModeDefault"]], "deviceinfo_computemodeexclusive (in module cv2.cuda)": [[2, "cv2.cuda.DeviceInfo_ComputeModeExclusive"]], "deviceinfo_computemodeexclusiveprocess (in module cv2.cuda)": [[2, "cv2.cuda.DeviceInfo_ComputeModeExclusiveProcess"]], "deviceinfo_computemodeprohibited (in module cv2.cuda)": [[2, "cv2.cuda.DeviceInfo_ComputeModeProhibited"]], "eccenabled() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.ECCEnabled"]], "event_blocking_sync (in module cv2.cuda)": [[2, "cv2.cuda.EVENT_BLOCKING_SYNC"], [2, "cv2.cuda.Event_BLOCKING_SYNC"]], "event_default (in module cv2.cuda)": [[2, "cv2.cuda.EVENT_DEFAULT"], [2, "cv2.cuda.Event_DEFAULT"]], "event_disable_timing (in module cv2.cuda)": [[2, "cv2.cuda.EVENT_DISABLE_TIMING"], [2, "cv2.cuda.Event_DISABLE_TIMING"]], "event_interprocess (in module cv2.cuda)": [[2, "cv2.cuda.EVENT_INTERPROCESS"], [2, "cv2.cuda.Event_INTERPROCESS"]], "event (class in cv2.cuda)": [[2, "cv2.cuda.Event"]], "event_elapsedtime() (in module cv2.cuda)": [[2, "cv2.cuda.Event_elapsedTime"]], "feature_set_compute_10 (in module cv2.cuda)": [[2, "cv2.cuda.FEATURE_SET_COMPUTE_10"]], "feature_set_compute_11 (in module cv2.cuda)": [[2, "cv2.cuda.FEATURE_SET_COMPUTE_11"]], "feature_set_compute_12 (in module cv2.cuda)": [[2, "cv2.cuda.FEATURE_SET_COMPUTE_12"]], "feature_set_compute_13 (in module cv2.cuda)": [[2, "cv2.cuda.FEATURE_SET_COMPUTE_13"]], "feature_set_compute_20 (in module cv2.cuda)": [[2, "cv2.cuda.FEATURE_SET_COMPUTE_20"]], "feature_set_compute_21 (in module cv2.cuda)": [[2, "cv2.cuda.FEATURE_SET_COMPUTE_21"]], "feature_set_compute_30 (in module cv2.cuda)": [[2, "cv2.cuda.FEATURE_SET_COMPUTE_30"]], "feature_set_compute_32 (in module cv2.cuda)": [[2, "cv2.cuda.FEATURE_SET_COMPUTE_32"]], "feature_set_compute_35 (in module cv2.cuda)": [[2, "cv2.cuda.FEATURE_SET_COMPUTE_35"]], "feature_set_compute_50 (in module cv2.cuda)": [[2, "cv2.cuda.FEATURE_SET_COMPUTE_50"]], "global_atomics (in module cv2.cuda)": [[2, "cv2.cuda.GLOBAL_ATOMICS"]], "gpudata (class in cv2.cuda)": [[2, "cv2.cuda.GpuData"]], "gpumat (class in cv2.cuda)": [[2, "cv2.cuda.GpuMat"]], "gpumatnd (class in cv2.cuda)": [[2, "cv2.cuda.GpuMatND"]], "gpumat_defaultallocator() (in module cv2.cuda)": [[2, "cv2.cuda.GpuMat_defaultAllocator"]], "gpumat_setdefaultallocator() (in module cv2.cuda)": [[2, "cv2.cuda.GpuMat_setDefaultAllocator"]], "host_mem_page_locked (in module cv2.cuda)": [[2, "cv2.cuda.HOST_MEM_PAGE_LOCKED"]], "host_mem_shared (in module cv2.cuda)": [[2, "cv2.cuda.HOST_MEM_SHARED"]], "host_mem_write_combined (in module cv2.cuda)": [[2, "cv2.cuda.HOST_MEM_WRITE_COMBINED"]], "hostmem (class in cv2.cuda)": [[2, "cv2.cuda.HostMem"]], "hostmem_page_locked (in module cv2.cuda)": [[2, "cv2.cuda.HostMem_PAGE_LOCKED"]], "hostmem_shared (in module cv2.cuda)": [[2, "cv2.cuda.HostMem_SHARED"]], "hostmem_write_combined (in module cv2.cuda)": [[2, "cv2.cuda.HostMem_WRITE_COMBINED"]], "native_double (in module cv2.cuda)": [[2, "cv2.cuda.NATIVE_DOUBLE"]], "null() (cv2.cuda.stream class method)": [[2, "cv2.cuda.Stream.Null"]], "shared_atomics (in module cv2.cuda)": [[2, "cv2.cuda.SHARED_ATOMICS"]], "stream (class in cv2.cuda)": [[2, "cv2.cuda.Stream"]], "stream_null() (in module cv2.cuda)": [[2, "cv2.cuda.Stream_Null"]], "targetarchs (class in cv2.cuda)": [[2, "cv2.cuda.TargetArchs"]], "targetarchs_has() (in module cv2.cuda)": [[2, "cv2.cuda.TargetArchs_has"]], "targetarchs_hasbin() (in module cv2.cuda)": [[2, "cv2.cuda.TargetArchs_hasBin"]], "targetarchs_hasequalorgreater() (in module cv2.cuda)": [[2, "cv2.cuda.TargetArchs_hasEqualOrGreater"]], "targetarchs_hasequalorgreaterbin() (in module cv2.cuda)": [[2, "cv2.cuda.TargetArchs_hasEqualOrGreaterBin"]], "targetarchs_hasequalorgreaterptx() (in module cv2.cuda)": [[2, "cv2.cuda.TargetArchs_hasEqualOrGreaterPtx"]], "targetarchs_hasequalorlessptx() (in module cv2.cuda)": [[2, "cv2.cuda.TargetArchs_hasEqualOrLessPtx"]], "targetarchs_hasptx() (in module cv2.cuda)": [[2, "cv2.cuda.TargetArchs_hasPtx"]], "warp_shuffle_functions (in module cv2.cuda)": [[2, "cv2.cuda.WARP_SHUFFLE_FUNCTIONS"]], "__init__() (cv2.cuda.bufferpool method)": [[2, "cv2.cuda.BufferPool.__init__"]], "__init__() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.__init__"], [2, "id1"]], "__init__() (cv2.cuda.event method)": [[2, "cv2.cuda.Event.__init__"]], "__init__() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.__init__"], [2, "id10"], [2, "id11"], [2, "id2"], [2, "id3"], [2, "id4"], [2, "id5"], [2, "id6"], [2, "id7"], [2, "id8"], [2, "id9"]], "__init__() (cv2.cuda.hostmem method)": [[2, "cv2.cuda.HostMem.__init__"], [2, "id37"], [2, "id38"], [2, "id39"], [2, "id40"], [2, "id41"]], "__init__() (cv2.cuda.stream method)": [[2, "cv2.cuda.Stream.__init__"], [2, "id42"], [2, "id43"]], "adjustroi() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.adjustROI"]], "assignto() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.assignTo"]], "asyncenginecount() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.asyncEngineCount"]], "canmaphostmemory() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.canMapHostMemory"]], "channels() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.channels"]], "channels() (cv2.cuda.hostmem method)": [[2, "cv2.cuda.HostMem.channels"]], "clockrate() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.clockRate"]], "clone() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.clone"]], "clone() (cv2.cuda.hostmem method)": [[2, "cv2.cuda.HostMem.clone"]], "col() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.col"]], "colrange() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.colRange"], [2, "id36"]], "computemode() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.computeMode"]], "concurrentkernels() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.concurrentKernels"]], "convertto() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.convertTo"], [2, "id33"], [2, "id34"]], "copyto() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.copyTo"], [2, "id23"], [2, "id24"], [2, "id25"]], "create() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.create"], [2, "id12"]], "create() (cv2.cuda.hostmem method)": [[2, "cv2.cuda.HostMem.create"]], "createcontinuous() (in module cv2.cuda)": [[2, "cv2.cuda.createContinuous"]], "creategpumatfromcudamemory() (in module cv2.cuda)": [[2, "cv2.cuda.createGpuMatFromCudaMemory"]], "creatematheader() (cv2.cuda.hostmem method)": [[2, "cv2.cuda.HostMem.createMatHeader"]], "cudaptr() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.cudaPtr"]], "cudaptr() (cv2.cuda.stream method)": [[2, "cv2.cuda.Stream.cudaPtr"]], "cv2.cuda": [[2, "module-cv2.cuda"]], "defaultallocator() (cv2.cuda.gpumat static method)": [[2, "cv2.cuda.GpuMat.defaultAllocator"]], "depth() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.depth"]], "depth() (cv2.cuda.hostmem method)": [[2, "cv2.cuda.HostMem.depth"]], "deviceid() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.deviceID"]], "download() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.download"], [2, "id18"], [2, "id19"], [2, "id20"], [2, "id21"], [2, "id22"]], "elapsedtime() (cv2.cuda.event static method)": [[2, "cv2.cuda.Event.elapsedTime"]], "elemsize() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.elemSize"]], "elemsize() (cv2.cuda.hostmem method)": [[2, "cv2.cuda.HostMem.elemSize"]], "elemsize1() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.elemSize1"]], "elemsize1() (cv2.cuda.hostmem method)": [[2, "cv2.cuda.HostMem.elemSize1"]], "empty() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.empty"]], "empty() (cv2.cuda.hostmem method)": [[2, "cv2.cuda.HostMem.empty"]], "ensuresizeisenough() (in module cv2.cuda)": [[2, "cv2.cuda.ensureSizeIsEnough"]], "fastnlmeansdenoising() (in module cv2.cuda)": [[2, "cv2.cuda.fastNlMeansDenoising"]], "fastnlmeansdenoisingcolored() (in module cv2.cuda)": [[2, "cv2.cuda.fastNlMeansDenoisingColored"]], "freememory() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.freeMemory"]], "getallocator() (cv2.cuda.bufferpool method)": [[2, "cv2.cuda.BufferPool.getAllocator"]], "getbuffer() (cv2.cuda.bufferpool method)": [[2, "cv2.cuda.BufferPool.getBuffer"], [2, "id0"]], "getcudaenableddevicecount() (in module cv2.cuda)": [[2, "cv2.cuda.getCudaEnabledDeviceCount"]], "getdevice() (in module cv2.cuda)": [[2, "cv2.cuda.getDevice"]], "has() (cv2.cuda.targetarchs static method)": [[2, "cv2.cuda.TargetArchs.has"]], "hasbin() (cv2.cuda.targetarchs static method)": [[2, "cv2.cuda.TargetArchs.hasBin"]], "hasequalorgreater() (cv2.cuda.targetarchs static method)": [[2, "cv2.cuda.TargetArchs.hasEqualOrGreater"]], "hasequalorgreaterbin() (cv2.cuda.targetarchs static method)": [[2, "cv2.cuda.TargetArchs.hasEqualOrGreaterBin"]], "hasequalorgreaterptx() (cv2.cuda.targetarchs static method)": [[2, "cv2.cuda.TargetArchs.hasEqualOrGreaterPtx"]], "hasequalorlessptx() (cv2.cuda.targetarchs static method)": [[2, "cv2.cuda.TargetArchs.hasEqualOrLessPtx"]], "hasptx() (cv2.cuda.targetarchs static method)": [[2, "cv2.cuda.TargetArchs.hasPtx"]], "integrated() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.integrated"]], "iscompatible() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.isCompatible"]], "iscontinuous() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.isContinuous"]], "iscontinuous() (cv2.cuda.hostmem method)": [[2, "cv2.cuda.HostMem.isContinuous"]], "kernelexectimeoutenabled() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.kernelExecTimeoutEnabled"]], "l2cachesize() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.l2CacheSize"]], "locateroi() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.locateROI"]], "majorversion() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.majorVersion"]], "maxgridsize() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxGridSize"]], "maxsurface1d() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxSurface1D"]], "maxsurface1dlayered() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxSurface1DLayered"]], "maxsurface2d() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxSurface2D"]], "maxsurface2dlayered() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxSurface2DLayered"]], "maxsurface3d() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxSurface3D"]], "maxsurfacecubemap() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxSurfaceCubemap"]], "maxsurfacecubemaplayered() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxSurfaceCubemapLayered"]], "maxtexture1d() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxTexture1D"]], "maxtexture1dlayered() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxTexture1DLayered"]], "maxtexture1dlinear() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxTexture1DLinear"]], "maxtexture1dmipmap() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxTexture1DMipmap"]], "maxtexture2d() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxTexture2D"]], "maxtexture2dgather() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxTexture2DGather"]], "maxtexture2dlayered() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxTexture2DLayered"]], "maxtexture2dlinear() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxTexture2DLinear"]], "maxtexture2dmipmap() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxTexture2DMipmap"]], "maxtexture3d() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxTexture3D"]], "maxtexturecubemap() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxTextureCubemap"]], "maxtexturecubemaplayered() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxTextureCubemapLayered"]], "maxthreadsdim() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxThreadsDim"]], "maxthreadsperblock() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxThreadsPerBlock"]], "maxthreadspermultiprocessor() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.maxThreadsPerMultiProcessor"]], "mempitch() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.memPitch"]], "memorybuswidth() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.memoryBusWidth"]], "memoryclockrate() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.memoryClockRate"]], "minorversion() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.minorVersion"]], "multiprocessorcount() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.multiProcessorCount"]], "nonlocalmeans() (in module cv2.cuda)": [[2, "cv2.cuda.nonLocalMeans"]], "pcibusid() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.pciBusID"]], "pcideviceid() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.pciDeviceID"]], "pcidomainid() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.pciDomainID"]], "printcudadeviceinfo() (in module cv2.cuda)": [[2, "cv2.cuda.printCudaDeviceInfo"]], "printshortcudadeviceinfo() (in module cv2.cuda)": [[2, "cv2.cuda.printShortCudaDeviceInfo"]], "queryifcomplete() (cv2.cuda.event method)": [[2, "cv2.cuda.Event.queryIfComplete"]], "queryifcomplete() (cv2.cuda.stream method)": [[2, "cv2.cuda.Stream.queryIfComplete"]], "querymemory() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.queryMemory"]], "record() (cv2.cuda.event method)": [[2, "cv2.cuda.Event.record"]], "registerpagelocked() (in module cv2.cuda)": [[2, "cv2.cuda.registerPageLocked"]], "regsperblock() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.regsPerBlock"]], "release() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.release"]], "resetdevice() (in module cv2.cuda)": [[2, "cv2.cuda.resetDevice"]], "reshape() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.reshape"]], "reshape() (cv2.cuda.hostmem method)": [[2, "cv2.cuda.HostMem.reshape"]], "row() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.row"]], "rowrange() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.rowRange"], [2, "id35"]], "setbufferpoolconfig() (in module cv2.cuda)": [[2, "cv2.cuda.setBufferPoolConfig"]], "setbufferpoolusage() (in module cv2.cuda)": [[2, "cv2.cuda.setBufferPoolUsage"]], "setdefaultallocator() (cv2.cuda.gpumat static method)": [[2, "cv2.cuda.GpuMat.setDefaultAllocator"]], "setdevice() (in module cv2.cuda)": [[2, "cv2.cuda.setDevice"]], "setto() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.setTo"], [2, "id26"], [2, "id27"], [2, "id28"], [2, "id29"], [2, "id30"], [2, "id31"], [2, "id32"]], "sharedmemperblock() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.sharedMemPerBlock"]], "size() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.size"]], "size() (cv2.cuda.hostmem method)": [[2, "cv2.cuda.HostMem.size"]], "step() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.step"]], "step() (cv2.cuda.hostmem method)": [[2, "cv2.cuda.HostMem.step"]], "step1() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.step1"]], "step1() (cv2.cuda.hostmem method)": [[2, "cv2.cuda.HostMem.step1"]], "surfacealignment() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.surfaceAlignment"]], "swap() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.swap"]], "swap() (cv2.cuda.hostmem method)": [[2, "cv2.cuda.HostMem.swap"]], "tccdriver() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.tccDriver"]], "texturealignment() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.textureAlignment"]], "texturepitchalignment() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.texturePitchAlignment"]], "totalconstmem() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.totalConstMem"]], "totalglobalmem() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.totalGlobalMem"]], "totalmemory() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.totalMemory"]], "type() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.type"]], "type() (cv2.cuda.hostmem method)": [[2, "cv2.cuda.HostMem.type"]], "unifiedaddressing() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.unifiedAddressing"]], "unregisterpagelocked() (in module cv2.cuda)": [[2, "cv2.cuda.unregisterPageLocked"]], "updatecontinuityflag() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.updateContinuityFlag"]], "upload() (cv2.cuda.gpumat method)": [[2, "cv2.cuda.GpuMat.upload"], [2, "id13"], [2, "id14"], [2, "id15"], [2, "id16"], [2, "id17"]], "waitevent() (cv2.cuda.stream method)": [[2, "cv2.cuda.Stream.waitEvent"]], "waitforcompletion() (cv2.cuda.event method)": [[2, "cv2.cuda.Event.waitForCompletion"]], "waitforcompletion() (cv2.cuda.stream method)": [[2, "cv2.cuda.Stream.waitForCompletion"]], "warpsize() (cv2.cuda.deviceinfo method)": [[2, "cv2.cuda.DeviceInfo.warpSize"]], "wrapstream() (in module cv2.cuda)": [[2, "cv2.cuda.wrapStream"]], "classificationmodel (class in cv2.dnn)": [[3, "cv2.dnn.ClassificationModel"]], "dnn_backend_cann (in module cv2.dnn)": [[3, "cv2.dnn.DNN_BACKEND_CANN"]], "dnn_backend_cuda (in module cv2.dnn)": [[3, "cv2.dnn.DNN_BACKEND_CUDA"]], "dnn_backend_default (in module cv2.dnn)": [[3, "cv2.dnn.DNN_BACKEND_DEFAULT"]], "dnn_backend_halide (in module cv2.dnn)": [[3, "cv2.dnn.DNN_BACKEND_HALIDE"]], "dnn_backend_inference_engine (in module cv2.dnn)": [[3, "cv2.dnn.DNN_BACKEND_INFERENCE_ENGINE"]], "dnn_backend_opencv (in module cv2.dnn)": [[3, "cv2.dnn.DNN_BACKEND_OPENCV"]], "dnn_backend_timvx (in module cv2.dnn)": [[3, "cv2.dnn.DNN_BACKEND_TIMVX"]], "dnn_backend_vkcom (in module cv2.dnn)": [[3, "cv2.dnn.DNN_BACKEND_VKCOM"]], "dnn_backend_webnn (in module cv2.dnn)": [[3, "cv2.dnn.DNN_BACKEND_WEBNN"]], "dnn_layout_ncdhw (in module cv2.dnn)": [[3, "cv2.dnn.DNN_LAYOUT_NCDHW"]], "dnn_layout_nchw (in module cv2.dnn)": [[3, "cv2.dnn.DNN_LAYOUT_NCHW"]], "dnn_layout_nd (in module cv2.dnn)": [[3, "cv2.dnn.DNN_LAYOUT_ND"]], "dnn_layout_ndhwc (in module cv2.dnn)": [[3, "cv2.dnn.DNN_LAYOUT_NDHWC"]], "dnn_layout_nhwc (in module cv2.dnn)": [[3, "cv2.dnn.DNN_LAYOUT_NHWC"]], "dnn_layout_planar (in module cv2.dnn)": [[3, "cv2.dnn.DNN_LAYOUT_PLANAR"]], "dnn_layout_unknown (in module cv2.dnn)": [[3, "cv2.dnn.DNN_LAYOUT_UNKNOWN"]], "dnn_pmode_crop_center (in module cv2.dnn)": [[3, "cv2.dnn.DNN_PMODE_CROP_CENTER"]], "dnn_pmode_letterbox (in module cv2.dnn)": [[3, "cv2.dnn.DNN_PMODE_LETTERBOX"]], "dnn_pmode_null (in module cv2.dnn)": [[3, "cv2.dnn.DNN_PMODE_NULL"]], "dnn_target_cpu (in module cv2.dnn)": [[3, "cv2.dnn.DNN_TARGET_CPU"]], "dnn_target_cpu_fp16 (in module cv2.dnn)": [[3, "cv2.dnn.DNN_TARGET_CPU_FP16"]], "dnn_target_cuda (in module cv2.dnn)": [[3, "cv2.dnn.DNN_TARGET_CUDA"]], "dnn_target_cuda_fp16 (in module cv2.dnn)": [[3, "cv2.dnn.DNN_TARGET_CUDA_FP16"]], "dnn_target_fpga (in module cv2.dnn)": [[3, "cv2.dnn.DNN_TARGET_FPGA"]], "dnn_target_hddl (in module cv2.dnn)": [[3, "cv2.dnn.DNN_TARGET_HDDL"]], "dnn_target_myriad (in module cv2.dnn)": [[3, "cv2.dnn.DNN_TARGET_MYRIAD"]], "dnn_target_npu (in module cv2.dnn)": [[3, "cv2.dnn.DNN_TARGET_NPU"]], "dnn_target_opencl (in module cv2.dnn)": [[3, "cv2.dnn.DNN_TARGET_OPENCL"]], "dnn_target_opencl_fp16 (in module cv2.dnn)": [[3, "cv2.dnn.DNN_TARGET_OPENCL_FP16"]], "dnn_target_vulkan (in module cv2.dnn)": [[3, "cv2.dnn.DNN_TARGET_VULKAN"]], "detectionmodel (class in cv2.dnn)": [[3, "cv2.dnn.DetectionModel"]], "dictvalue (class in cv2.dnn)": [[3, "cv2.dnn.DictValue"]], "image2blobparams (class in cv2.dnn)": [[3, "cv2.dnn.Image2BlobParams"]], "keypointsmodel (class in cv2.dnn)": [[3, "cv2.dnn.KeypointsModel"]], "layer (class in cv2.dnn)": [[3, "cv2.dnn.Layer"]], "model (class in cv2.dnn)": [[3, "cv2.dnn.Model"]], "nmsboxes() (in module cv2.dnn)": [[3, "cv2.dnn.NMSBoxes"]], "nmsboxesbatched() (in module cv2.dnn)": [[3, "cv2.dnn.NMSBoxesBatched"]], "nmsboxesrotated() (in module cv2.dnn)": [[3, "cv2.dnn.NMSBoxesRotated"]], "net (class in cv2.dnn)": [[3, "cv2.dnn.Net"]], "net_readfrommodeloptimizer() (in module cv2.dnn)": [[3, "cv2.dnn.Net_readFromModelOptimizer"]], "soft_nmsmethod_softnms_gaussian (in module cv2.dnn)": [[3, "cv2.dnn.SOFT_NMSMETHOD_SOFTNMS_GAUSSIAN"]], "soft_nmsmethod_softnms_linear (in module cv2.dnn)": [[3, "cv2.dnn.SOFT_NMSMETHOD_SOFTNMS_LINEAR"]], "segmentationmodel (class in cv2.dnn)": [[3, "cv2.dnn.SegmentationModel"]], "softnmsmethod_softnms_gaussian (in module cv2.dnn)": [[3, "cv2.dnn.SoftNMSMethod_SOFTNMS_GAUSSIAN"]], "softnmsmethod_softnms_linear (in module cv2.dnn)": [[3, "cv2.dnn.SoftNMSMethod_SOFTNMS_LINEAR"]], "textdetectionmodel (class in cv2.dnn)": [[3, "cv2.dnn.TextDetectionModel"]], "textdetectionmodel_db (class in cv2.dnn)": [[3, "cv2.dnn.TextDetectionModel_DB"]], "textdetectionmodel_east (class in cv2.dnn)": [[3, "cv2.dnn.TextDetectionModel_EAST"]], "textrecognitionmodel (class in cv2.dnn)": [[3, "cv2.dnn.TextRecognitionModel"]], "__init__() (cv2.dnn.classificationmodel method)": [[3, "cv2.dnn.ClassificationModel.__init__"], [3, "id0"]], "__init__() (cv2.dnn.detectionmodel method)": [[3, "cv2.dnn.DetectionModel.__init__"], [3, "id2"]], "__init__() (cv2.dnn.dictvalue method)": [[3, "cv2.dnn.DictValue.__init__"], [3, "id4"], [3, "id5"]], "__init__() (cv2.dnn.image2blobparams method)": [[3, "cv2.dnn.Image2BlobParams.__init__"], [3, "id6"]], "__init__() (cv2.dnn.keypointsmodel method)": [[3, "cv2.dnn.KeypointsModel.__init__"], [3, "id7"]], "__init__() (cv2.dnn.model method)": [[3, "cv2.dnn.Model.__init__"], [3, "id10"]], "__init__() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.__init__"]], "__init__() (cv2.dnn.segmentationmodel method)": [[3, "cv2.dnn.SegmentationModel.__init__"], [3, "id30"]], "__init__() (cv2.dnn.textdetectionmodel_db method)": [[3, "cv2.dnn.TextDetectionModel_DB.__init__"], [3, "id38"]], "__init__() (cv2.dnn.textdetectionmodel_east method)": [[3, "cv2.dnn.TextDetectionModel_EAST.__init__"], [3, "id39"]], "__init__() (cv2.dnn.textrecognitionmodel method)": [[3, "cv2.dnn.TextRecognitionModel.__init__"], [3, "id40"]], "blobfromimage() (in module cv2.dnn)": [[3, "cv2.dnn.blobFromImage"]], "blobfromimagewithparams() (in module cv2.dnn)": [[3, "cv2.dnn.blobFromImageWithParams"]], "blobfromimages() (in module cv2.dnn)": [[3, "cv2.dnn.blobFromImages"]], "blobfromimageswithparams() (in module cv2.dnn)": [[3, "cv2.dnn.blobFromImagesWithParams"]], "blobrecttoimagerect() (cv2.dnn.image2blobparams method)": [[3, "cv2.dnn.Image2BlobParams.blobRectToImageRect"]], "blobrectstoimagerects() (cv2.dnn.image2blobparams method)": [[3, "cv2.dnn.Image2BlobParams.blobRectsToImageRects"]], "blobs (cv2.dnn.layer attribute)": [[3, "cv2.dnn.Layer.blobs"]], "bordervalue (cv2.dnn.image2blobparams attribute)": [[3, "cv2.dnn.Image2BlobParams.borderValue"]], "classify() (cv2.dnn.classificationmodel method)": [[3, "cv2.dnn.ClassificationModel.classify"], [3, "id1"]], "connect() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.connect"]], "cv2.dnn": [[3, "module-cv2.dnn"]], "datalayout (cv2.dnn.image2blobparams attribute)": [[3, "cv2.dnn.Image2BlobParams.datalayout"]], "ddepth (cv2.dnn.image2blobparams attribute)": [[3, "cv2.dnn.Image2BlobParams.ddepth"]], "detect() (cv2.dnn.detectionmodel method)": [[3, "cv2.dnn.DetectionModel.detect"], [3, "id3"]], "detect() (cv2.dnn.textdetectionmodel method)": [[3, "cv2.dnn.TextDetectionModel.detect"], [3, "id32"], [3, "id33"], [3, "id34"]], "detecttextrectangles() (cv2.dnn.textdetectionmodel method)": [[3, "cv2.dnn.TextDetectionModel.detectTextRectangles"], [3, "id35"], [3, "id36"], [3, "id37"]], "dump() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.dump"]], "dumptofile() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.dumpToFile"]], "empty() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.empty"]], "enablefusion() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.enableFusion"]], "enablewinograd() (cv2.dnn.model method)": [[3, "cv2.dnn.Model.enableWinograd"]], "enablewinograd() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.enableWinograd"]], "estimate() (cv2.dnn.keypointsmodel method)": [[3, "cv2.dnn.KeypointsModel.estimate"], [3, "id8"]], "finalize() (cv2.dnn.layer method)": [[3, "cv2.dnn.Layer.finalize"], [3, "id9"]], "forward() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.forward"], [3, "id16"], [3, "id17"], [3, "id18"], [3, "id19"]], "forwardandretrieve() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.forwardAndRetrieve"]], "forwardasync() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.forwardAsync"]], "getavailabletargets() (in module cv2.dnn)": [[3, "cv2.dnn.getAvailableTargets"]], "getbinarythreshold() (cv2.dnn.textdetectionmodel_db method)": [[3, "cv2.dnn.TextDetectionModel_DB.getBinaryThreshold"]], "getconfidencethreshold() (cv2.dnn.textdetectionmodel_east method)": [[3, "cv2.dnn.TextDetectionModel_EAST.getConfidenceThreshold"]], "getdecodetype() (cv2.dnn.textrecognitionmodel method)": [[3, "cv2.dnn.TextRecognitionModel.getDecodeType"]], "getenablesoftmaxpostprocessing() (cv2.dnn.classificationmodel method)": [[3, "cv2.dnn.ClassificationModel.getEnableSoftmaxPostProcessing"]], "getflops() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.getFLOPS"], [3, "id25"], [3, "id26"], [3, "id27"]], "getinputdetails() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.getInputDetails"]], "getintvalue() (cv2.dnn.dictvalue method)": [[3, "cv2.dnn.DictValue.getIntValue"]], "getlayer() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.getLayer"], [3, "id14"], [3, "id15"]], "getlayerid() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.getLayerId"]], "getlayernames() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.getLayerNames"]], "getlayertypes() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.getLayerTypes"]], "getlayerscount() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.getLayersCount"]], "getlayersshapes() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.getLayersShapes"], [3, "id24"]], "getmaxcandidates() (cv2.dnn.textdetectionmodel_db method)": [[3, "cv2.dnn.TextDetectionModel_DB.getMaxCandidates"]], "getmemoryconsumption() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.getMemoryConsumption"], [3, "id28"], [3, "id29"]], "getnmsthreshold() (cv2.dnn.textdetectionmodel_east method)": [[3, "cv2.dnn.TextDetectionModel_EAST.getNMSThreshold"]], "getnmsacrossclasses() (cv2.dnn.detectionmodel method)": [[3, "cv2.dnn.DetectionModel.getNmsAcrossClasses"]], "getoutputdetails() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.getOutputDetails"]], "getparam() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.getParam"], [3, "id23"]], "getperfprofile() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.getPerfProfile"]], "getpolygonthreshold() (cv2.dnn.textdetectionmodel_db method)": [[3, "cv2.dnn.TextDetectionModel_DB.getPolygonThreshold"]], "getrealvalue() (cv2.dnn.dictvalue method)": [[3, "cv2.dnn.DictValue.getRealValue"]], "getstringvalue() (cv2.dnn.dictvalue method)": [[3, "cv2.dnn.DictValue.getStringValue"]], "getunclipratio() (cv2.dnn.textdetectionmodel_db method)": [[3, "cv2.dnn.TextDetectionModel_DB.getUnclipRatio"]], "getunconnectedoutlayers() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.getUnconnectedOutLayers"]], "getunconnectedoutlayersnames() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.getUnconnectedOutLayersNames"]], "getvocabulary() (cv2.dnn.textrecognitionmodel method)": [[3, "cv2.dnn.TextRecognitionModel.getVocabulary"]], "imagesfromblob() (in module cv2.dnn)": [[3, "cv2.dnn.imagesFromBlob"]], "isint() (cv2.dnn.dictvalue method)": [[3, "cv2.dnn.DictValue.isInt"]], "isreal() (cv2.dnn.dictvalue method)": [[3, "cv2.dnn.DictValue.isReal"]], "isstring() (cv2.dnn.dictvalue method)": [[3, "cv2.dnn.DictValue.isString"]], "mean (cv2.dnn.image2blobparams attribute)": [[3, "cv2.dnn.Image2BlobParams.mean"]], "name() (cv2.dnn.layer method)": [[3, "cv2.dnn.Layer.name"]], "outputnametoindex() (cv2.dnn.layer method)": [[3, "cv2.dnn.Layer.outputNameToIndex"]], "paddingmode (cv2.dnn.image2blobparams attribute)": [[3, "cv2.dnn.Image2BlobParams.paddingmode"]], "predict() (cv2.dnn.model method)": [[3, "cv2.dnn.Model.predict"], [3, "id12"]], "preferabletarget() (cv2.dnn.layer method)": [[3, "cv2.dnn.Layer.preferableTarget"]], "quantize() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.quantize"], [3, "id20"]], "readfrommodeloptimizer() (cv2.dnn.net class method)": [[3, "cv2.dnn.Net.readFromModelOptimizer"], [3, "id13"]], "readnet() (in module cv2.dnn)": [[3, "cv2.dnn.readNet"]], "readnetfromcaffe() (in module cv2.dnn)": [[3, "cv2.dnn.readNetFromCaffe"]], "readnetfromdarknet() (in module cv2.dnn)": [[3, "cv2.dnn.readNetFromDarknet"]], "readnetfrommodeloptimizer() (in module cv2.dnn)": [[3, "cv2.dnn.readNetFromModelOptimizer"]], "readnetfromonnx() (in module cv2.dnn)": [[3, "cv2.dnn.readNetFromONNX"]], "readnetfromtflite() (in module cv2.dnn)": [[3, "cv2.dnn.readNetFromTFLite"]], "readnetfromtensorflow() (in module cv2.dnn)": [[3, "cv2.dnn.readNetFromTensorflow"]], "readnetfromtorch() (in module cv2.dnn)": [[3, "cv2.dnn.readNetFromTorch"]], "readtensorfromonnx() (in module cv2.dnn)": [[3, "cv2.dnn.readTensorFromONNX"]], "readtorchblob() (in module cv2.dnn)": [[3, "cv2.dnn.readTorchBlob"]], "recognize() (cv2.dnn.textrecognitionmodel method)": [[3, "cv2.dnn.TextRecognitionModel.recognize"], [3, "id41"], [3, "id42"], [3, "id43"]], "run() (cv2.dnn.layer method)": [[3, "cv2.dnn.Layer.run"]], "scalefactor (cv2.dnn.image2blobparams attribute)": [[3, "cv2.dnn.Image2BlobParams.scalefactor"]], "segment() (cv2.dnn.segmentationmodel method)": [[3, "cv2.dnn.SegmentationModel.segment"], [3, "id31"]], "setbinarythreshold() (cv2.dnn.textdetectionmodel_db method)": [[3, "cv2.dnn.TextDetectionModel_DB.setBinaryThreshold"]], "setconfidencethreshold() (cv2.dnn.textdetectionmodel_east method)": [[3, "cv2.dnn.TextDetectionModel_EAST.setConfidenceThreshold"]], "setdecodeoptsctcprefixbeamsearch() (cv2.dnn.textrecognitionmodel method)": [[3, "cv2.dnn.TextRecognitionModel.setDecodeOptsCTCPrefixBeamSearch"]], "setdecodetype() (cv2.dnn.textrecognitionmodel method)": [[3, "cv2.dnn.TextRecognitionModel.setDecodeType"]], "setenablesoftmaxpostprocessing() (cv2.dnn.classificationmodel method)": [[3, "cv2.dnn.ClassificationModel.setEnableSoftmaxPostProcessing"]], "sethalidescheduler() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.setHalideScheduler"]], "setinput() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.setInput"], [3, "id21"]], "setinputcrop() (cv2.dnn.model method)": [[3, "cv2.dnn.Model.setInputCrop"]], "setinputmean() (cv2.dnn.model method)": [[3, "cv2.dnn.Model.setInputMean"]], "setinputparams() (cv2.dnn.model method)": [[3, "cv2.dnn.Model.setInputParams"]], "setinputscale() (cv2.dnn.model method)": [[3, "cv2.dnn.Model.setInputScale"]], "setinputshape() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.setInputShape"]], "setinputsize() (cv2.dnn.model method)": [[3, "cv2.dnn.Model.setInputSize"], [3, "id11"]], "setinputswaprb() (cv2.dnn.model method)": [[3, "cv2.dnn.Model.setInputSwapRB"]], "setinputsnames() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.setInputsNames"]], "setmaxcandidates() (cv2.dnn.textdetectionmodel_db method)": [[3, "cv2.dnn.TextDetectionModel_DB.setMaxCandidates"]], "setnmsthreshold() (cv2.dnn.textdetectionmodel_east method)": [[3, "cv2.dnn.TextDetectionModel_EAST.setNMSThreshold"]], "setnmsacrossclasses() (cv2.dnn.detectionmodel method)": [[3, "cv2.dnn.DetectionModel.setNmsAcrossClasses"]], "setparam() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.setParam"], [3, "id22"]], "setpolygonthreshold() (cv2.dnn.textdetectionmodel_db method)": [[3, "cv2.dnn.TextDetectionModel_DB.setPolygonThreshold"]], "setpreferablebackend() (cv2.dnn.model method)": [[3, "cv2.dnn.Model.setPreferableBackend"]], "setpreferablebackend() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.setPreferableBackend"]], "setpreferabletarget() (cv2.dnn.model method)": [[3, "cv2.dnn.Model.setPreferableTarget"]], "setpreferabletarget() (cv2.dnn.net method)": [[3, "cv2.dnn.Net.setPreferableTarget"]], "setunclipratio() (cv2.dnn.textdetectionmodel_db method)": [[3, "cv2.dnn.TextDetectionModel_DB.setUnclipRatio"]], "setvocabulary() (cv2.dnn.textrecognitionmodel method)": [[3, "cv2.dnn.TextRecognitionModel.setVocabulary"]], "shrinkcaffemodel() (in module cv2.dnn)": [[3, "cv2.dnn.shrinkCaffeModel"]], "size (cv2.dnn.image2blobparams attribute)": [[3, "cv2.dnn.Image2BlobParams.size"]], "softnmsboxes() (in module cv2.dnn)": [[3, "cv2.dnn.softNMSBoxes"]], "swaprb (cv2.dnn.image2blobparams attribute)": [[3, "cv2.dnn.Image2BlobParams.swapRB"]], "type() (cv2.dnn.layer method)": [[3, "cv2.dnn.Layer.type"]], "writetextgraph() (in module cv2.dnn)": [[3, "cv2.dnn.writeTextGraph"]]}})